{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>Welcome to Scala Academy project! \ud83e\udd19</p> <p>I'm Jacek Laskowski, an IT freelancer specializing in Apache Spark, Delta Lake and Apache Kafka (with brief forays into a wider data engineering space, e.g. Trino and ksqlDB, mostly during Warsaw Data Engineering meetups).</p> <p>I'm very excited to have you here and hope you will enjoy learning Scala and the ecosystem (e.g. Apache Spark, Apache Kafka) as much as I have.</p>  <p>Flannery O'Connor</p> <p>I write to discover what I know.</p>   \"The Internals Of\" series <p>I'm also writing other online books in the \"The Internals Of\" series. Please visit \"The Internals Of\" Online Books home page.</p>  <p>Expect text and code snippets from a variety of public sources. Attribution follows.</p> <p>Now, let's start the journey \ud83d\udd25</p>  <p>Last update: 2022-05-11</p>","title":"Scala Academy"},{"location":"todo/","text":"<p>Here comes a list of things to touch upon at some point during the Scala Academy. Consider it a scrapbook.</p> <ol> <li>ScalaCheck</li> <li>Testcontainers</li> <li>Testing Kafka apps<ol> <li>Consumer and Producer APIs</li> <li>Testing Apache Kafka</li> <li>MockProducer</li> <li>MockConsumer</li> </ol> </li> <li>Testing Kafka Streams applications<ol> <li>Testing Kafka Streams</li> <li>Testing Streams Code</li> </ol> </li> <li>Github Workflows<ul> <li>https://github.com/cashapp/pranadb/tree/main/.github/workflows</li> <li>https://github.com/dbt-labs/dbt-spark/tree/main/.github/workflows</li> <li>https://github.com/delta-io/delta/tree/master/.github/workflows</li> <li>https://github.com/datapunchorg/punch/blob/main/.github/workflows</li> </ul> </li> </ol>","title":"TODO"},{"location":"todo/#docker-compose","text":"<ol> <li>Overview of Docker Compose</li> <li>Get started with Docker Compose</li> </ol>","title":"Docker Compose"},{"location":"todo/#exercise-dockerized-kafka-cluster","text":"<p>Running a dockerized Kafka Cluster using Confluent Platform (and Docker Compose).</p>","title":"Exercise: Dockerized Kafka Cluster"},{"location":"todo/#exercise-dockerized-kafka-streams-application","text":"<p>Create and run a dockerized Kafka Streams application.</p> <p>TIP: Use Confluent Platform (and Docker Compose).</p>","title":"Exercise: Dockerized Kafka Streams Application"},{"location":"todo/#dockerized-spark-app","text":"<p>Working together on Exercise 3: Dockerized Spark App from the Docker module.</p>","title":"Dockerized Spark App"},{"location":"todo/#introduction-to-cloudera-enterprise-63","text":"<p>Read the following documents. Get familiar with the basics.</p> <ol> <li>Overview of Cloudera and the Cloudera Documentation Set</li> <li>CDH Overview</li> <li>Cloudera Manager Overview</li> <li>(optional) Cluster Management</li> </ol>  <p>Important</p> <p>From Cloudera Community Forum:</p>  <p>We currently don't support any docker-based sandbox/quickstart clusters. The one available in GitHub is of a very old CDH version.</p>","title":"Introduction to Cloudera Enterprise 6.3"},{"location":"docker/","text":"<p>Docker module is among the main modules of the Scala Academy project.</p> <p>It is scheduled to take 3 days of Week 10.</p> <p>This module teaches you how to deploy Scala applications (incl. Spark and Kafka Streams apps) to Docker environment.</p>","title":"Docker"},{"location":"docker/#resources","text":"<ol> <li>docker rmi</li> <li>Format command and log output</li> <li>Format the output</li> </ol>","title":"Resources"},{"location":"docker/001/","text":"","title":"Day 1 / May 4 (Wed)"},{"location":"docker/001/#introduction-to-docker","text":"<ol> <li>Docker overview</li> <li>Get Docker</li> <li>Learn how to build an image using a Dockerfile</li> </ol>","title":"Introduction to Docker"},{"location":"docker/001/#dockerizing-scala-apps","text":"<p>Read the following pages to get familiar with sbt plugins for creating Docker images:</p> <ol> <li>sbt-docker</li> <li>sbt-native-packager<ol> <li>Docker Plugin</li> </ol> </li> </ol>","title":"Dockerizing Scala Apps"},{"location":"docker/001/#exercise","text":"<ol> <li>Write a Scala command-line application that prints out the command-line arguments to the standard output (console)</li> <li>Use one of the sbt plugins to create a Docker image</li> <li>Run the Scala application as a Docker container</li> </ol>","title":"Exercise"},{"location":"docker/001/#homework-get-started","text":"<p>Read the following documents and get familiar with the concepts of Docker:</p> <ol> <li>Get started / Part 1: Getting started</li> <li>Get started / Part 2: Sample application</li> <li>Get started / Part 3: Update the application</li> <li>Get started / Part 4: Share the application</li> </ol>","title":"Homework: Get started"},{"location":"docker/001/#resources","text":"<ol> <li>The official documentation of Docker</li> </ol>","title":"Resources"},{"location":"docker/002/","text":"<p>Focusing on Docker and developing dockerized Scala apps</p>","title":"Day 2 / May 5 (Thu)"},{"location":"docker/002/#opening","text":"<p>A new month, new challenges.</p> <ol> <li>Switching gears and putting closer look at project collaboration using <code>git</code>, Github and pull requests<ol> <li>PRs to the main scala-academy-sandbox repo</li> <li>Whatever needs to be reviewed should be a PR</li> <li>Use packages with your first name to scope your own classes</li> </ol> </li> <li>Thu till the lunch break (12pm) in the office. At home later on.<ol> <li>Checkpoints at 1:30pm and 2:15pm</li> </ol> </li> <li>Working remotely<ol> <li>Fri this week</li> <li>Mon and Tue next week</li> <li>perhaps even the whole week</li> </ol> </li> </ol>","title":"Opening"},{"location":"docker/002/#in-the-morning","text":"<ol> <li>A demo of a dockerized Scala app (from the exercise yesterday) by the one and only Adam</li> <li>Exploring sbt-docker together</li> </ol>","title":"In the Morning"},{"location":"docker/002/#exercise","text":"<ol> <li>Create a Docker image of a Scala command-line application that uses scopt (as an external dependency)<ol> <li><code>--help</code> for a demo is enough. Thanks Ania!</li> </ol> </li> <li>Use sbt-docker plugin to create a Docker image</li> <li>Run the Scala application as a Docker container</li> </ol>","title":"Exercise"},{"location":"docker/002/#in-the-late-afternoon","text":"<ol> <li>A demo of a dockerized Scala app by Mateusz</li> <li>Contributing to scala-academy-sandbox using pull requests</li> </ol>","title":"In the Late Afternoon"},{"location":"docker/003/","text":"<p>Today, the team puts focus on the following:</p> <ol> <li>Developing dockerized Spark and Kafka Streams application</li> <li>Contributing to a git repo on Github (using pull requests and issues)</li> </ol>","title":"Day 3 / May 6 (Fri)"},{"location":"docker/003/#in-the-morning","text":"<p>Reviewing pull requests to <code>scala-academy-sandbox</code> repo.</p>","title":"In the Morning"},{"location":"docker/003/#exercise-1-file-listing","text":"<p>Create a dockerized Scala command-line application that accepts a directory to list files from.</p> <pre><code>docker run [imageName] /path/to/a/directory\n</code></pre> <p>Push the code to a Github repo.</p>","title":"Exercise 1: File Listing"},{"location":"docker/003/#removing-images-by-id","text":"<p>Read Format command and log output.</p>  <pre><code>docker rmi -f $(docker images --format '{{.ID}}' 'mateusz/*')\n</code></pre>","title":"Removing Images by ID"},{"location":"docker/003/#exercise-2-docker-mount","text":"<p>It's a follow-up exercise to Exercise 1.</p> <p>Read Manage application data and mount a directory outside the Docker image to list files from.</p>","title":"Exercise 2: Docker Mount"},{"location":"docker/003/#exercise-3-dockerized-spark-app","text":"<ol> <li>Create a dockerized Spark application that loads files from one or more directories<ol> <li>Use <code>local[*]</code> master URL</li> <li>Use scopt to handle command line (or stick to <code>args</code>)</li> </ol> </li> </ol>","title":"Exercise 3: Dockerized Spark App"},{"location":"hadoop/","text":"<p>Hadoop module is among the main modules of the Scala Academy project.</p> <p>It is scheduled to take 3 days of Week 11.</p> <p>The module teaches you Apache Hadoop project focusing on Hadoop Distributed File System (HDFS) and Hadoop YARN.</p>","title":"Hadoop"},{"location":"hadoop/#topics","text":"<ol> <li>Hadoop on command line</li> <li>How to use HDFS and YARN</li> <li>Deploying Spark applications to Hadoop YARN</li> <li>Cloudera 6.3</li> <li>Cloudera Manager</li> <li>CDP Sandbox</li> </ol>","title":"Topics"},{"location":"hadoop/#resources","text":"<ol> <li>The official documentation of Apache Hadoop</li> </ol>","title":"Resources"},{"location":"hadoop/001/","text":"","title":"Day 1 / May 9 (Mon)"},{"location":"hadoop/001/#introduction-to-apache-hadoop-332","text":"<p>Read the following documents. Get familiar with the basics.</p> <ol> <li>Apache Hadoop</li> <li>Release 3.3.2 available</li> <li>Hadoop Commands Guide</li> <li>FileSystem Shell</li> <li>The Hadoop FileSystem API Definition</li> </ol>","title":"Introduction to Apache Hadoop 3.3.2"},{"location":"hadoop/001/#exercise-setting-up-hadoop-cluster","text":"<p>Hadoop: Setting up a Single Node Cluster which shows you how to set up a single-node Hadoop installation.</p> <p>We are interested in Pseudo-Distributed Mode.</p> <p>Please note that you should download a binary distribution (e.g., <code>hadoop-3.3.2.tar.gz</code>).</p>","title":"Exercise: Setting Up Hadoop Cluster"},{"location":"hadoop/001/#code-review","text":"<ol> <li>https://github.com/szczepanja/file-listing</li> <li>https://github.com/1Gize/list-files-in-folder</li> </ol>","title":"Code Review"},{"location":"hadoop/001/#introduction-to-hdfs","text":"<p>Read the following documents:</p> <ol> <li>Architecture</li> <li>Users Guide</li> <li>Commands Guide</li> </ol>","title":"Introduction to HDFS"},{"location":"hadoop/001/#exercise-spark-sql-and-hdfs","text":"<p>Create a Spark SQL application that loads CSV files from a HDFS directory</p> <ol> <li>Use <code>hdfs://</code> URI</li> <li>Review Load Spark data locally Incomplete HDFS URI et al.</li> </ol>","title":"Exercise: Spark SQL and HDFS"},{"location":"hadoop/001/#tips","text":"<pre><code>./sbin/start-dfs.sh\n</code></pre> <pre><code>./bin/hdfs dfs -mkdir /files\n./bin/hdfs dfs -put README.txt /files/\n</code></pre> <pre><code>./bin/hdfs dfs -ls /files\n</code></pre> <pre><code>spark.read.text(\"hdfs://localhost:9000/files/\").show\n</code></pre>","title":"Tips"},{"location":"hadoop/002/","text":"","title":"Day 2 / May 10 (Tue)"},{"location":"hadoop/002/#introduction-to-hadoop-yarn","text":"<p>Read the following documents. Get familiar with the basics.</p> <ol> <li>Architecture</li> <li>Commands</li> <li>web services REST API</li> <li>(optional) Writing YARN Applications</li> </ol>","title":"Introduction to Hadoop YARN"},{"location":"hadoop/002/#exercise-spark-on-yarn","text":"<ol> <li>Read Running Spark on YARN</li> <li>Use the Spark SQL application that you created yesterday (that loads CSV files from a HDFS directory) and deploy it to your local Hadoop YARN cluster</li> </ol>","title":"Exercise: Spark on YARN"},{"location":"hadoop/002/#code-review","text":"<ol> <li>https://github.com/JKulczynski/Docker-CommandLine-App</li> <li>https://github.com/rafalkac02/directory-traverser</li> </ol>","title":"Code Review"},{"location":"hadoop/002/#optional-exercise-spark-on-yarn-on-docker","text":"<ol> <li>Read Launching Applications Using Docker Containers</li> <li>Deploy the Spark SQL application to the Hadoop YARN cluster on Docker</li> </ol>","title":"(optional) Exercise: Spark on YARN on Docker"},{"location":"hadoop/003/","text":"","title":"Day 3 / May 11 (Wed)"},{"location":"hadoop/003/#exercise-spark-on-yarn","text":"<p>Solving issues related to the Exercise: Spark on YARN led by the one and only Adam. Thanks Adam!</p>","title":"Exercise: Spark on YARN"},{"location":"hadoop/003/#testing-spark-applications","text":"<p>It was Adam again who led the demo of testing Spark applications. Thanks Adam!</p>","title":"Testing Spark Applications"},{"location":"kafka/","text":"<p>Kafka module is among the main modules of the Scala Academy project. It is scheduled to take 2 weeks and teaches Apache Kafka 3.1.0 focusing on the following modules:</p> <ul> <li>Kafka (the broker) (Week 8)</li> <li>Kafka Streams (Week 9)</li> </ul> <p>After this module you should be able to explain the following:</p> <ol> <li>Kafka<ol> <li>Partitions</li> <li>Offsets<ol> <li>How to reset an offset</li> </ol> </li> <li>Retention</li> <li>How to use Kafka (less how to set it up)</li> <li>How to use Kafka topics</li> <li>Message ordering in topics</li> <li>The difference between at-least/at-most-once, exactly-once</li> <li>One vs many Kafka consumers</li> <li>Basic configuration properties</li> <li>Consumer group</li> </ol> </li> <li>Kafka Streams</li> <li>Akka Streams</li> <li>Kafka Connect / Standalone</li> </ol>","title":"Kafka"},{"location":"kafka/001/","text":"","title":"Day 1 / Apr 19 (Tue)"},{"location":"kafka/001/#introduction-apache-kafka","text":"<p>Coming up next are 4 days to learn Apache Kafka (with Scala).</p>","title":"Introduction: Apache Kafka"},{"location":"kafka/001/#morning-exercises","text":"<ol> <li>Installing Apache Kafka following Apache Kafka Quickstart (up to and including \"Step 5: Read The Events\")</li> <li>[2021-04-26] Challenge #387 [Easy] Caesar cipher</li> </ol>","title":"Morning Exercises"},{"location":"kafka/001/#theory","text":"<ol> <li>The Essentials of Apache Kafka\u2122 (Architecture and Core Concepts)</li> </ol>","title":"Theory"},{"location":"kafka/001/#practice","text":"<ol> <li>Exercise: Developing Kafka Producer<ul> <li>As we are on MS Windows with Windows Subsystem for Linux (Ubuntu) we ran Kafka on both OSes</li> </ul> </li> </ol>","title":"Practice"},{"location":"kafka/001/#resources","text":"<ol> <li>The official documentation of Apache Kafka</li> <li>Gently Down the Stream (A Gentle Introduction to Apache Kafka)</li> </ol>","title":"Resources"},{"location":"kafka/001/#homework","text":"<p>Review the following javadocs:</p> <ol> <li>package org.apache.kafka.clients.producer<ol> <li>org.apache.kafka.clients.producer.KafkaProducer</li> <li>org.apache.kafka.clients.producer.ProducerRecord</li> </ol> </li> <li>package org.apache.kafka.clients.consumer</li> </ol>","title":"Homework"},{"location":"kafka/002/","text":"<p>Continuing our journey into Apache Kafka by developing Scala applications using Consumer and Producer APIs and doing some admin things.</p>","title":"Day 2 / Apr 20 (Wed)"},{"location":"kafka/002/#practice","text":"<ol> <li>Exercise: Developing Kafka Consumer</li> <li>Exercise: Kafka Application as Consumer and Producer</li> <li>Exercise: Configuring Multi-Broker Kafka Cluster</li> </ol>","title":"Practice"},{"location":"kafka/003/","text":"<p>Continuing our journey into Apache Kafka. Today we're using Spark SQL and Spark Structured Streaming to process records from Kafka topics.</p>","title":"Day 3 / Apr 21 (Thu)"},{"location":"kafka/003/#morning-exercise","text":"<ol> <li>Exercise: Word Count Per Record</li> </ol>","title":"Morning Exercise"},{"location":"kafka/003/#theory","text":"<p>Structured Streaming + Kafka Integration Guide (Kafka broker version 0.10.0 or higher)</p> <p><code>kafka-console-consumer</code> with some options:</p> <pre><code>./bin/kafka-console-consumer.sh \\\n    --property print.key=true \\\n    --property key.separator=\" -&gt; \" \\\n    --bootstrap-server :9092 \\\n    --topic output \\\n    --from-beginning \\\n    --value-deserializer org.apache.kafka.common.serialization.IntegerDeserializer\n</code></pre>","title":"Theory"},{"location":"kafka/003/#practice","text":"<ol> <li> <p>Write a Spark application that loads Kafka records (from a topic given by <code>args(0)</code>) and displays them to the console</p> <ol> <li>Create a brand new project in IntelliJ IDEA</li> <li>Push the project to Github</li> </ol> <p>Part 1. Spark SQL and show records (using <code>DataFrame.show</code>)</p> <p>Part 2. Spark Structured Streaming and show records (using <code>format(\"console\")</code>)</p> </li> <li> <p>Modify the above Spark application to accept 2 command-line arguments <code>topicIn</code> and <code>topicOut</code> to load records from and save them to, appropriately. The application should change record values to their UPPERCASE variant.</p> <p>Push the project to Github once finished or at the end of the day (whatever happens earlier). Report it on slack.</p> </li> </ol>","title":"Practice"},{"location":"kafka/003/#learning-resources","text":"<ol> <li>Structured Streaming + Kafka Integration Guide (Kafka broker version 0.10.0 or higher)</li> <li>How to use the console consumer to read non-string primitive keys and values</li> </ol>","title":"Learning Resources"},{"location":"kafka/004/","text":"","title":"Day 4 / Apr 22 (Fri)"},{"location":"kafka/004/#morning-exercise","text":"<p>Exercise: Using Consumer Group</p> <p>After completing the exercise, run multiple instances of your Kafka consumer application (you should have one developed already) and observe what partitions they consume. Modify the application to print out record values and partitions to the standard output (console).</p>","title":"Morning Exercise"},{"location":"kafka/004/#theory","text":"<ol> <li>Kafka Consumers, Consumer Groups, and Partition Rebalancing</li> </ol>","title":"Theory"},{"location":"kafka/004/#practice","text":"<p>Honing our skills in Object-Oriented Programming in Scala.</p> <p>For every exercise do the following:</p> <ol> <li>Write tests</li> <li>Publish to Github</li> </ol>","title":"Practice"},{"location":"kafka/004/#exercise-1","text":"<p>Write the following classes so, when executed, use something instance-specific:</p> <ol> <li><code>Logger</code> that <code>print</code>s out a message with a log prefix</li> <li><code>Sender</code> that <code>send</code>s out a message with a message header</li> </ol> <p>\"Executed\" means \"called\" by a \"caller\".</p>","title":"Exercise 1"},{"location":"kafka/004/#exercise-2-bank","text":"<p>Write a <code>Bank</code> class that may have one or more <code>Account</code>s.</p> <p>An <code>Account</code> has a balance and a number.</p> <ol> <li>You can make a deposit and a withdraw of a specified amount<ul> <li>Handle insufficient funds to withdraw</li> <li>Is it enough to return a boolean value to indicate a failure?</li> </ul> </li> <li>You can print a statement for an account</li> <li>You can close an account (which is to make a balance zero)</li> </ol> <p>Define <code>transfer</code> method to transfer money from one account to another (only when there is enough money).</p>","title":"Exercise 2: Bank"},{"location":"kafka/004/#exercise-3-currency-exchange","text":"<p>Define a <code>Kantor</code> class with the following properties:</p> <ol> <li>A customer can open one or more currency accounts</li> <li>A customer can exchange one currency to another (between accounts) according to exchange rate table published at regular intervals</li> </ol>","title":"Exercise 3: Currency Exchange"},{"location":"kafka/004/#exercise-4-speaking-languages","text":"<p>A person can speak different languages.</p> <p>Write a <code>Person</code> class that can say <code>hello</code> in as many languages as it knows (e.g. English, French, Polish, German).</p> <p>A person can report what languages it can speak.</p> <p>Two people can talk only when they speak at least one language they both can speak.</p>","title":"Exercise 4: Speaking Languages"},{"location":"kafka/004/#homework","text":"<ol> <li>Complete the Exercises</li> <li>Exercise: Partition Leader Election and Consumer Fail-Over</li> </ol>","title":"Homework"},{"location":"kafka/005/","text":"","title":"Day 5 / Apr 25 (Mon)"},{"location":"kafka/005/#welcome-to-week-9","text":"<p>Coming up are 2 days (Mon and Tue) to develop a solid foundation of Kafka Streams with Scala.</p> <p>Wed and Thu are conference days.</p> <p>On Fri, half a day for Kafka Connect and another half for Akka Streams. Just a tiny bit as they are considered information-only.</p>","title":"Welcome to Week 9"},{"location":"kafka/005/#morning-exercises","text":"","title":"Morning Exercises"},{"location":"kafka/005/#algorithmic-thinking","text":"<ol> <li>[2020-10-21] Challenge #386 [Intermediate] Partition counts</li> </ol>","title":"Algorithmic Thinking"},{"location":"kafka/005/#object-oriented-programming","text":"<p>Define a <code>Room</code> class that should do the following:</p> <ol> <li>A room has a name and capacity<ul> <li>capacity = the maximum number of people that can enter a room</li> </ul> </li> <li>A person can enter a room (only when there is still free space)</li> <li>A person can leave a room</li> <li>A room can report the number of people inside (who entered)</li> </ol> <p>Write tests and publish to Github.</p>","title":"Object-Oriented Programming"},{"location":"kafka/005/#theory","text":"<ol> <li>Read Introducing Kafka Streams: Stream Processing Made Simple</li> <li>Read Writing A Streams Application</li> <li>Read Kafka Streams DSL for Scala</li> </ol>","title":"Theory"},{"location":"kafka/005/#demo","text":"<ol> <li>Tutorial: Write A Kafka Streams Application</li> </ol>","title":"Demo"},{"location":"kafka/005/#practice","text":"<ol> <li>Sample Usage</li> <li>Run Kafka Streams Demo Application</li> </ol>","title":"Practice"},{"location":"kafka/005/#resources","text":"<ol> <li>The official documentation of Kafka Streams</li> </ol>","title":"Resources"},{"location":"kafka/006/","text":"","title":"Day 6 / Apr 26 (Tue)"},{"location":"kafka/006/#kafka-streams-cntd","text":"<p>Kafka Streams with Scala</p>","title":"Kafka Streams Cntd"},{"location":"kafka/006/#morning-exercise","text":"","title":"Morning Exercise"},{"location":"kafka/006/#word-count-per-record","text":"<p>Remember Exercise: Word Count Per Record? Use Kafka Streams this time.</p>","title":"Word Count Per Record"},{"location":"kafka/006/#object-oriented-programming","text":"<p>Define the following classes to represent 2-dimentional figures:</p> <ol> <li><code>Triangle</code></li> <li><code>Square</code></li> <li><code>Rectangle</code></li> <li><code>Circle</code></li> </ol> <p>The figures should all report the following:</p> <ol> <li>Perimeter (obw\u00f3d)</li> <li>Area (pole)</li> </ol> <p>Write tests and publish to Github.</p>","title":"Object-Oriented Programming"},{"location":"kafka/006/#code-review","text":"<p>A code review session with the solutions to the Object-Oriented Programming exercise yesterday.</p> <ol> <li>https://github.com/MateuszSab/room-oop</li> <li>https://github.com/1Gize/room</li> <li>https://github.com/zdulak/scala-exercises</li> <li>https://github.com/szczepanja/room-oop</li> <li>https://github.com/admskrzpk/room-capacity</li> </ol>","title":"Code Review"},{"location":"kafka/006/#theory","text":"<ol> <li>High-Level Streams DSL</li> </ol>","title":"Theory"},{"location":"kafka/006/#practice","text":"<p>Exercise: Joining KStream with KTable (\"Currency Exchange\")</p>","title":"Practice"},{"location":"kafka/007/","text":"","title":"Day 7 / Apr 29 (Fri)"},{"location":"kafka/007/#kafka-connect","text":"","title":"Kafka Connect"},{"location":"kafka/007/#theory","text":"<p>Read the following:</p> <ul> <li>Kafka Connect</li> <li>2.4 Connect API</li> </ul>","title":"Theory"},{"location":"kafka/007/#practice","text":"<p>Do the following:</p> <ol> <li>Running Kafka Connect</li> <li>8.3 Connector Development Guide</li> </ol>","title":"Practice"},{"location":"kafka/007/#akka-streams","text":"","title":"Akka Streams"},{"location":"kafka/007/#theory_1","text":"<p>Read the following:</p> <ul> <li>Akka Streams</li> </ul>","title":"Theory"},{"location":"kafka/007/#practice_1","text":"<p>Do the following:</p> <ol> <li>Streams Quickstart Guide</li> </ol>","title":"Practice"},{"location":"kafka/007/#extra-sbt","text":"<p>sbt allows executing single test suite and tests (regardless of the number of tests and test suites in a project). That allows for highly-selective test execution.</p> <p>sbt comes with <code>testOnly</code> with <code>-t</code> and <code>-z</code> options. Find out how in this PR and do the following:</p> <ol> <li>Execute the following test suites only from the Delta Lake project:<ul> <li>OptimizeMetricsSuite</li> <li>OptimizeCompactionSuite</li> </ul> </li> <li>Execute a single test from the test suites (e.g. optimize command: with database and table name)</li> </ol>","title":"Extra: sbt"},{"location":"kubernetes/","text":"<p>Kubernetes module is one of the topics of the Scala Academy project.</p> <p>It is scheduled to take 2 days of Week 11.</p> <p>The module teaches you Kubernetes project focusing on the following:</p> <ol> <li>Spark on k8s</li> <li>minikube</li> <li><code>kubectl</code><ol> <li>scale, describe, rollout restart, edit, exec, log, get</li> </ol> </li> </ol>","title":"Kubernetes"},{"location":"kubernetes/001/","text":"","title":"Day 1 / May 12 (Thu)"},{"location":"kubernetes/001/#introduction-kubernetes","text":"<ul> <li>Kubernetes Documentation / Concepts</li> <li>Running Spark on Kubernetes</li> </ul>","title":"Introduction: Kubernetes"},{"location":"kubernetes/001/#exercise-installing-minikube","text":"<p>minikube start</p>","title":"Exercise: Installing minikube"},{"location":"kubernetes/001/#exercises-spark-on-minikube","text":"<ol> <li>Demo: spark-shell on minikube</li> <li>Demo: Running Spark Application on minikube</li> <li>Demo: Running Spark Examples on minikube</li> <li>Demo: Running Spark Structured Streaming on minikube</li> <li>(optional) Demo: Spark and Local Filesystem in minikube</li> </ol>","title":"Exercises: Spark on minikube"},{"location":"kubernetes/002/","text":"","title":"Day 2 / May 13 (Fri)"},{"location":"kubernetes/002/#exercise-kafka-streams-on-minikube","text":"<p>Scaling up and down a Kafka Streams application on minikube.</p>","title":"Exercise: Kafka Streams on minikube"},{"location":"repos/","text":"<p>Repos is a list of the repositories that are eligible for a code review (the team1 asked for).</p>","title":"Repos"},{"location":"repos/#adam","text":"<ol> <li>https://github.com/stars/admskrzpk/lists/scalaexam</li> <li>https://github.com/admskrzpk/reverse-engineering</li> <li>https://github.com/admskrzpk/Most-important-rows</li> <li>https://github.com/stars/admskrzpk/lists/easter-homework</li> <li>https://github.com/admskrzpk/SparkKafka3</li> <li>https://github.com/admskrzpk/room-capacity</li> <li>https://github.com/admskrzpk/figures</li> <li>https://github.com/admskrzpk/word-count-streams</li> <li>https://github.com/admskrzpk/currency-exchange</li> </ol>","title":"Adam"},{"location":"repos/#ania","text":"<ol> <li>https://github.com/szczepanja/letter-value-sum</li> <li>https://github.com/szczepanja/isogram</li> <li>https://github.com/szczepanja/nonogram-row</li> <li>https://github.com/szczepanja/hamming</li> <li>https://github.com/szczepanja/robot-simulator</li> <li>https://github.com/szczepanja/pascals-triangle</li> <li>https://github.com/szczepanja/most-important-rows</li> <li>https://github.com/szczepanja/project-euler</li> <li>https://github.com/szczepanja/reverse-engineering</li> <li>https://github.com/szczepanja/scala-reddit</li> <li>https://github.com/szczepanja/scala-project-node</li> <li>https://github.com/szczepanja/word-per-count-record</li> <li>https://github.com/szczepanja/spark-submit-kafka</li> <li>https://github.com/szczepanja/object-oriented-programming</li> <li>https://github.com/szczepanja/room-oop</li> <li>https://github.com/szczepanja/partition-counts</li> <li>https://github.com/szczepanja/kafka-word-count</li> <li>https://github.com/szczepanja/currency-exchange</li> <li>https://github.com/szczepanja/figures</li> <li>https://github.com/szczepanja/file-listing</li> <li>https://github.com/szczepanja/spark-and-hdfs</li> </ol>","title":"Ania"},{"location":"repos/#damian","text":"<ol> <li>https://github.com/zdulak/letter-value-sum</li> <li>https://github.com/zdulak/isogram</li> <li>https://github.com/zdulak/nonogram-row</li> <li>https://github.com/zdulak/hamming</li> <li>https://github.com/zdulak/robot-simulator</li> <li>https://github.com/zdulak/pascal-triangle</li> <li>https://github.com/zdulak/matching-braces</li> <li>https://github.com/zdulak/Tic-tac-toe-scala</li> <li>https://github.com/zdulak/HanoiTower</li> <li>https://github.com/zdulak/ComputerScala</li> <li>https://github.com/zdulak/DataFrame</li> <li>https://github.com/zdulak/SortedList</li> <li>https://github.com/zdulak/spiral-ascension</li> <li>Spark<ol> <li>https://github.com/zdulak/spark-demo</li> <li>https://github.com/zdulak/spark-stream</li> <li>https://github.com/zdulak/spark-exercises</li> </ol> </li> <li>https://github.com/zdulak/project-euler</li> <li>https://github.com/zdulak/graph</li> <li>https://github.com/zdulak/scala-exercises</li> <li>https://github.com/zdulak/scala-oop-exercises</li> <li>https://github.com/zdulak/spark-kafka-exercises</li> <li>https://github.com/zdulak/kafka-streams-exercises</li> <li>https://github.com/zdulak/list-files</li> </ol>","title":"Damian"},{"location":"repos/#daniel","text":"<ol> <li>https://github.com/dfiedosiuk/letter-value-sum</li> <li>https://github.com/dfiedosiuk/isogram</li> <li>https://github.com/dfiedosiuk/nanogram-row</li> <li>https://github.com/dfiedosiuk/hamming</li> <li>https://github.com/dfiedosiuk/robot-simulator</li> <li>https://github.com/dfiedosiuk/pascals-triangle</li> <li>https://github.com/dfiedosiuk/matching-brackets</li> <li>https://github.com/dfiedosiuk/spiral-ascension</li> <li>https://github.com/stars/dfiedosiuk/lists/easter-homework</li> <li>https://github.com/dfiedosiuk/sbt-docker-list-folders-app</li> </ol>","title":"Daniel"},{"location":"repos/#grzesiek","text":"<ol> <li>https://github.com/1Gize/letter-value-sums</li> <li>https://github.com/1Gize/Isogram</li> <li>https://github.com/1Gize/Nongram-Row</li> <li>https://github.com/1Gize/Hamming</li> <li>https://github.com/1Gize/Robot</li> <li>https://github.com/1Gize/kafka-producer-wordcount</li> <li>https://github.com/1Gize/spark-read-from-kafka</li> <li>https://github.com/1Gize/room</li> <li>https://github.com/1Gize/kafka-streams-word-count</li> <li>https://github.com/1Gize/kantor-kafka-streams</li> <li>https://github.com/1Gize/list-files-in-folder</li> </ol>","title":"Grzesiek"},{"location":"repos/#janek","text":"<ol> <li>https://github.com/JKulczynski/Scala-exam-first</li> <li>https://github.com/JKulczynski/Scala-exam-isogram</li> <li>https://github.com/JKulczynski/Scala-exam-nonogram-row</li> <li>https://github.com/JKulczynski/Scala-exam-hamming</li> <li>https://github.com/JKulczynski/Scala-exam-robot-simulator/</li> <li>https://github.com/JKulczynski/Power-unit-converter</li> <li>https://github.com/JKulczynski/Docker-CommandLine-App</li> </ol>","title":"Janek"},{"location":"repos/#krzysiek","text":"<ol> <li>https://github.com/krzyjedra/letter-value-sum</li> <li>https://github.com/krzyjedra/isogram</li> <li>https://github.com/krzyjedra/hamming</li> <li>https://github.com/krzyjedra/nonogram-row</li> <li>https://github.com/krzyjedra/room-app</li> <li>https://github.com/krzyjedra/2-dimentional-figures</li> <li>https://github.com/krzyjedra/easter-scala-ex1</li> <li>https://github.com/krzyjedra/easter-scala-ex2</li> <li>https://github.com/krzyjedra/dockerized-scala-cmd-app</li> </ol>","title":"Krzysiek"},{"location":"repos/#leonard","text":"<ol> <li>https://github.com/leonardbalas1/CalculatorFinal</li> <li>https://github.com/leonardbalas1/converter</li> <li>https://github.com/leonardbalas1/file-words-occurences</li> <li>https://github.com/leonardbalas1/UpperCase</li> <li>https://github.com/leonardbalas1/toUpperCaseByN</li> <li>https://github.com/leonardbalas1/SquareRoot</li> <li>https://github.com/leonardbalas1/99problems_attempt2</li> </ol>","title":"Leonard"},{"location":"repos/#mateusz","text":"<ol> <li>https://github.com/MateuszSab/LetterValSum</li> <li>https://github.com/MateuszSab/Isogram</li> <li>https://github.com/MateuszSab/NonogramRow</li> <li>https://github.com/MateuszSab/Hamming</li> <li>https://github.com/MateuszSab/spiral</li> <li>https://github.com/MateuszSab/kafka-word-count</li> <li>https://github.com/MateuszSab/structured-streaming-kafka-integration</li> <li>https://github.com/MateuszSab/room-oop</li> <li>https://github.com/MateuszSab/word-count-kafka-streams</li> <li>https://github.com/MateuszSab/shapes-oop</li> <li>https://github.com/MateuszSab/kafka-streams-joinig</li> <li>https://github.com/MateuszSab/files-from-dir</li> </ol>","title":"Mateusz"},{"location":"repos/#rafa","text":"<ol> <li>https://github.com/rafalkac02/adform-scala-academy-exam0-exercise-1</li> <li>https://github.com/rafalkac02/kafka-word-count</li> <li>https://github.com/rafalkac02/spark-kafka-records</li> <li>https://github.com/rafalkac02/directory-traverser</li> </ol>   <ol> <li> <p>The story, all names, characters, and incidents portrayed in this production are fictitious. No identification with actual persons (living or deceased), places, buildings, and products is intended or should be inferred. (cf. All persons fictitious disclaimer)\u00a0\u21a9</p> </li> </ol>","title":"Rafa\u0142"},{"location":"scala/","text":"<p>Scala module is among the modules of the Scala Academy project. It is scheduled to take 1 month and teaches Scala 2.13.8.</p>","title":"Scala"},{"location":"scala/001/","text":"","title":"Day 1 / Mar 1 (Tue)"},{"location":"scala/001/#operating-system","text":"<p>The workshop is on Windows 11 with Windows Subsystem for Linux (WSL) / Ubuntu.</p>","title":"Operating System"},{"location":"scala/001/#development-tools","text":"<p>Installing the development tools:</p> <ol> <li>OpenJDK 11 (WSL/Ubuntu and Windows)</li> <li>IntelliJ IDEA (Windows) + the Scala plugin</li> <li>sbt</li> </ol>","title":"Development Tools"},{"location":"scala/001/#topics","text":"<ol> <li>Created a Scala project to display \"hello world\" in IntelliJ IDEA (a Scala/sbt project)<ul> <li><code>object</code></li> <li><code>extends App</code></li> <li><code>println</code></li> </ul> </li> <li>Using sbt<ul> <li><code>compile</code></li> <li><code>run</code></li> <li><code>~</code> + <code>~run</code></li> <li><code>console</code></li> <li><code>build.properties</code></li> </ul> </li> <li>Scala REPL using <code>sbt console</code><ul> <li><code>build.sbt</code> to set the Scala version</li> <li>REPL = read-eval-print loop</li> <li>Scala types (String, Integer, Long, Char, Boolean)</li> <li><code>res</code> values</li> <li><code>val</code> keyword</li> <li>TAB completion</li> </ul> </li> <li>Scala for the Impatient book<ul> <li>Parts of Chapter 1 \"The Basics\"</li> <li>Up to and including the Exercises on page 11</li> <li>Optional parentheses for methods with no parameters</li> <li>Optional semicolon</li> </ul> </li> </ol>","title":"Topics"},{"location":"scala/001/#working-hours","text":"<p>Day: Mar 1</p> <p>10:30am - 4pm in the office</p>","title":"Working Hours"},{"location":"scala/002/","text":"","title":"Day 2 / Mar 2 (Wed)"},{"location":"scala/002/#topics","text":"<p>Working with the Scala for the Impatient book</p>","title":"Topics"},{"location":"scala/002/#chapter-1","text":"<p>1.2 Declaring Values and Variables</p> <ul> <li><code>val</code>s</li> <li>Optional types</li> </ul> <p>1.3 Commonly Used Types</p> <ul> <li>All types are classes</li> <li>Invoking methods</li> <li>StringOps</li> </ul> <p>1.5 Calling Functions and Methods</p> <ul> <li>Function vs Method</li> </ul> <p>1.6 The apply Method</p> <ul> <li>With apply you don't need new</li> </ul> <p>1.7 Scaladoc</p> <ul> <li>https://docs.scala-lang.org/style/scaladoc.html</li> <li>https://www.scala-lang.org/api/2.13.8/</li> </ul>","title":"Chapter 1"},{"location":"scala/002/#chapter-2","text":"<p>Expressions</p> <p>2.1 Conditional Expressions</p> <ul> <li><code>if</code>s</li> </ul> <p>2.3 Block Expressions and Assignments</p> <p>2.4 Input and Output</p> <ul> <li><code>print</code></li> <li><code>println</code></li> <li><code>readLine(prompt)</code></li> <li><code>read</code> methods</li> </ul> <p>2.7 Functions</p> <p>2.8 Default and Named Arguments</p> <p>2.12 Exceptions</p> <ul> <li><code>try-finally</code> statement</li> </ul> <p>Exercises (page 26)</p> <ul> <li>1</li> <li>5</li> </ul>","title":"Chapter 2"},{"location":"scala/003/","text":"","title":"Day 3 / Mar 3 (Thu)"},{"location":"scala/003/#opening-questions","text":"<ol> <li>Are there any questions about the Scala topics covered?</li> <li>What do you think was the most important Scala feature covered yesterday?</li> </ol>","title":"Opening Questions"},{"location":"scala/003/#topics","text":"<p>Continuing development of <code>calculator</code> project as the foundation to teach the following:</p> <ol> <li>Refactoring in IntelliJ IDEA<ul> <li>Rename</li> <li>Extract Method</li> <li>Override</li> </ul> </li> <li><code>if</code> expression<ul> <li>Predicates as Scala methods</li> <li>Complex conditions using <code>&amp;&amp;</code> and <code>||</code></li> <li>Expressions vs statements</li> </ul> </li> </ol> <p>Others:</p> <p>Working with the Learning Scala book</p> <ol> <li><code>sbt console</code>, Scala REPL and <code>:paste</code></li> <li>Scala worksheet</li> <li><code>class User(name: String)</code></li> <li><code>def toString</code></li> </ol>","title":"Topics"},{"location":"scala/003/#working-hours","text":"<p>Day: Mar 3 (Thu)</p> <p>8:30am - 3pm in the office</p>","title":"Working Hours"},{"location":"scala/004/","text":"","title":"Day 4 / Mar 4 (Fri)"},{"location":"scala/004/#opening-questions","text":"<ol> <li>Are there any questions about the Scala topics covered?</li> <li>What was the most important Scala feature that we covered during the last session?</li> </ol>","title":"Opening Questions"},{"location":"scala/004/#exercise-user-class","text":"<p>Define <code>User</code> class with <code>greet</code> method that says \"Hello from $name\" when executed.</p>","title":"Exercise: User Class"},{"location":"scala/004/#scala-topics","text":"<ol> <li> <p><code>val</code> vs <code>def</code></p> <p>size(\"hello\")  // funkcja \"hello\".size   // metoda</p> </li> <li> <p><code>class User(name: String)</code> vs <code>class User(val name: String)</code> (note <code>name</code> parameter)</p> </li> </ol>","title":"Scala Topics"},{"location":"scala/004/#git","text":"<ul> <li>git installation on Windows 11</li> <li>git commmands</li> <li><code>init</code></li> <li><code>status</code></li> <li><code>add</code></li> <li><code>commit</code></li> <li><code>log</code></li> <li><code>diff</code> (<code>head..head~1</code>, using commit shas)</li> </ul>","title":"git"},{"location":"scala/004/#scala-topics_1","text":"<ul> <li>scala.Predef</li> <li>Scaladoc</li> <li><code>String</code> (it's <code>java.lang.String</code>)</li> <li>scala.collection.StringOps</li> <li>Higher-Order Functions (HOFs)</li> <li><code>filter</code></li> <li><code>sortBy</code></li> <li><code>foreach</code></li> <li> <p>Underscore to mark unused input arguments to a function</p> <p>val size: String =&gt; Int = _ =&gt; 5</p> </li> <li> <p><code>assert</code></p> <p>assert(size(\"hello\") == \"hello\".size)</p> <p>assert(\"hello\".sortBy(c =&gt; c.toInt) == \"ehllo\")   assert(\"hello\".sortBy(_.toInt) == \"ehllo\")</p> </li> <li> <p>procedure vs method vs function</p> </li> <li>methods = class members</li> <li>functions = standalone named executable block</li> <li>procedure = method that returns nothing (<code>Unit</code>)</li> </ul>","title":"Scala Topics"},{"location":"scala/004/#exercise-stringops-favorities","text":"<p>Pick two methods of scala.collection.StringOps and use Scala Worksheet with <code>sbt console</code> to learn how to use them:</p> <ol> <li><code>++</code>, <code>concat</code></li> <li><code>filter</code></li> <li><code>drop</code></li> <li><code>apply</code></li> <li><code>sortBy</code></li> <li><code>tail</code></li> <li><code>foreach</code></li> </ol>","title":"Exercise: StringOps Favorities"},{"location":"scala/004/#exercise-convert-function-to-method","text":"<p>Convert the <code>f</code> function to be a <code>def</code> to be used in <code>filter</code>.</p> <pre><code>val f: Char =&gt; Boolean = c =&gt; c != 'e' &amp;&amp; c != 'o'\n\ndef f_def... = ???\n\"hello\".filter(f_def) == \"hll\"\n</code></pre>","title":"Exercise: Convert function to method"},{"location":"scala/004/#exercise","text":"<p>Write <code>last</code> function that works like <code>StringOps.last</code> and uses the methods of <code>StringOps</code> we talked about today (except <code>last</code>).</p> <pre><code>val last: String =&gt; Char = ???\n</code></pre> <p>Hint: Use <code>size</code> and <code>apply</code></p>","title":"Exercise"},{"location":"scala/004/#learning-scala","text":"<p>Working with the Learning Scala book, Chapter 8 \"Classes\".</p>","title":"Learning Scala"},{"location":"scala/004/#homework","text":"<p>Write <code>nth</code> function that returns the character at <code>n</code>-th position.</p> <pre><code>nth(s: String, n: Int): Char\n</code></pre> <p>Assume <code>n</code> as <code>0 &lt;= n &lt; s.length</code>.</p>","title":"Homework"},{"location":"scala/004/#breaks","text":"<ol> <li>9:50 - 10:00</li> <li>11:00 - 11:10</li> <li>12:30 - 13:15 lunch break</li> </ol>","title":"Breaks"},{"location":"scala/004/#working-hours","text":"<p>Day: Mar 4 (Fri)</p> <p>8:30am - 3pm remotely</p>","title":"Working Hours"},{"location":"scala/005/","text":"","title":"Day 5 / Mar 7 (Mon)"},{"location":"scala/005/#opening-questions","text":"<ol> <li>Are there any questions about the Scala topics we covered so far?</li> <li>What was the most important Scala feature that we covered during the last session?</li> </ol>","title":"Opening Questions"},{"location":"scala/005/#review-homework","text":"<p>Write <code>nth</code> function that returns the character at <code>n</code>-th position.</p> <pre><code>nth(s: String, n: Int): Char\n</code></pre> <p>Assume <code>n</code> as <code>0 &lt;= n &lt; s.length</code>.</p>  <p>Review nth.sc for a solution.</p>","title":"Review Homework"},{"location":"scala/005/#option","text":"<ol> <li>Type Constructors<ul> <li>Known as \"Generic Type\" in Java</li> </ul> </li> <li>Scaladoc</li> </ol>","title":"Option"},{"location":"scala/005/#placeholder-syntax","text":"<p>Learning Scala book, page 72</p> <ol> <li>Function literals<ul> <li>Rocket operator <code>=&gt;</code></li> </ul> </li> <li>Demo: <code>doubler: Int =&gt; Int</code> function<ul> <li>Review doubler.sc</li> </ul> </li> <li>Demo: <code>safeStringOp(s: String, f: String =&gt; String): String</code> to return the result of executing <code>f</code> on the input <code>s</code> string when <code>s != null</code><ul> <li>Review safeStringOp.sc</li> </ul> </li> <li> <p>Exercise: Write a higher-order function (similar to the above) that accepts three input arguments (<code>x</code> and <code>y</code> ints and a <code>f</code> function that accepts two ints to produce an int) that executes <code>f</code> on the two ints. How to execute it?</p> <p>def combination(x: Int, y: Int, f: (Int, Int) =&gt; Int): Int</p> <ul> <li>Review combination.sc</li> </ul> </li> <li> <p>Very useful for Scala Collections library (coming up next)</p> </li> </ol>","title":"Placeholder Syntax"},{"location":"scala/005/#scala-collections-library","text":"<p>Learning Scala book, Chapter 6, page 83</p> <p>Package: scala.collections</p> <ul> <li>immutable</li> <li>mutable</li> </ul> <p>Data structures for collecting one or more values of a given type:</p> <ol> <li><code>Array</code></li> <li><code>List</code></li> <li><code>Map</code></li> <li><code>Set</code></li> <li>others</li> </ol> <p>Building blocks of modern software projects</p> <p>Iterable - the foundation for iteration and manipulation</p> <p>Demo: Creating instances of <code>List</code>, <code>Set</code> and <code>Map</code></p> <ul> <li>List</li> </ul> <p>Exercise: Review the scaladoc of <code>List</code>. Pick two higher-order methods (methods with a function argument). Write a sample code for each (to demo how they work).</p>","title":"Scala Collections Library"},{"location":"scala/005/#schedule","text":"<ol> <li>8:30 - 9:45</li> <li>10:00 - 11:00</li> <li>11:10 - 12:00</li> <li>12:00 - 12:45 lunch break</li> <li>12:45 - 1:30pm</li> <li>1:40pm - 2:45pm</li> </ol>","title":"Schedule"},{"location":"scala/005/#working-hours","text":"<p>Day: Mar 7 (Mon)</p> <ul> <li>8:30am - 3pm in the office</li> <li>2 hours for own work</li> </ul>","title":"Working Hours"},{"location":"scala/006/","text":"","title":"Day 6 / Mar 8 (Tue)"},{"location":"scala/006/#opening-questions","text":"<ol> <li>Are there any questions about the Scala topics we covered so far?</li> <li>What was the most important Scala feature that we covered during the last session?</li> </ol>","title":"Opening Questions"},{"location":"scala/006/#scala-collections-library","text":"<p>Learning Scala book, Chapter 6, page 83</p> <p>Package: scala.collections</p> <p>Exercise: Create a <code>List</code> of <code>List</code>s.</p> <p><code>Nil</code> and <code>::</code></p> <p>Exercise: Create a <code>List</code> of 5 numbers and find the ones that are less than 3.</p> <p>Exercise: Create a <code>List</code> of strings and apply <code>toUpperCase</code> on each</p> <ol> <li>Mapping List, p. 92</li> <li>Reducing Lists, p. 93-94</li> <li>List folding, p. 97</li> <li>Converting Collections, p. 98</li> </ol>","title":"Scala Collections Library"},{"location":"scala/006/#exercises","text":"<p>Learning Scala book, page 102:</p> <ol> <li>1, 2, 3, 4, 5, 6</li> </ol>","title":"Exercises"},{"location":"scala/006/#schedule","text":"<ol> <li>8:30 - 9:45</li> <li>10:00 - 11:00</li> <li>11:10 - 12:00</li> <li>12:00 - 12:45 lunch break</li> <li>12:45 - 1:30pm</li> <li>1:40pm - 2:30pm</li> </ol>","title":"Schedule"},{"location":"scala/006/#working-hours","text":"<ul> <li>8:30am - 2:30pm in the office</li> <li>2 hours for own work</li> </ul>","title":"Working Hours"},{"location":"scala/007/","text":"","title":"Day 7 / Mar 9 (Wed)"},{"location":"scala/007/#opening-questions","text":"<ol> <li>Are there any questions about the Scala topics we covered so far?</li> <li>What was the most important Scala feature that we covered during the last session?</li> </ol>","title":"Opening Questions"},{"location":"scala/007/#new-learning-approach-for-thu-and-fri","text":"<p>Taking on a new learning approach where 10 people are split into two teams (5 people each):</p> <ol> <li>Advanced</li> <li>Regulars</li> </ol> <p>The teams work remotely.</p> <p>The Advanced team is responsible for developing a game Tic-tac-toe in the coming two days (Thu and Fri). They work alone.</p> <p>Besides, one person from the Advanced team learns ScalaTest to be ready for a demo on Monday next week.</p> <p>The Regulars work on the S-99: Ninety-Nine Scala Problems to catch up to the Advanced team.</p> <p>The schedule for Thu and Fri (remote work):</p> <ol> <li>8:30am Check-in</li> <li>10:30am, 1pm and 2:30pm Regular checks</li> <li>12pm-12:45pm Lunch break</li> </ol>","title":"New Learning Approach for Thu and Fri"},{"location":"scala/007/#s-99-ninety-nine-scala-problems","text":"<p>Working on S-99: Ninety-Nine Scala Problems.</p>","title":"S-99: Ninety-Nine Scala Problems"},{"location":"scala/007/#schedule","text":"<ol> <li>8:30 - 9:45</li> <li>10:00 - 11:00</li> <li>11:10 - 12:00</li> <li>12:00 - 12:45 lunch break</li> <li>12:45 - 1:30pm</li> <li>1:40pm - 2:30pm</li> </ol>","title":"Schedule"},{"location":"scala/007/#working-hours","text":"<ul> <li>8:30am - 2:30pm in the office</li> <li>2 hours for own work</li> </ul>","title":"Working Hours"},{"location":"scala/008/","text":"","title":"Day 8 / Mar 10 (Thu)"},{"location":"scala/009/","text":"","title":"Day 9 / Mar 11 (Fri)"},{"location":"scala/009/#check-in-at-830am","text":"<ol> <li>The last day of the 2-day work-alone session<ul> <li>The Regulars work on S99 problems</li> <li>The Advanced finishes up the game. Once finished, work on S99 problems, review the past Scala topics (from the past days)</li> </ul> </li> <li>The Advanced team is supposed to deliver the application not later than at 2:30pm<ul> <li>GitHub recommended</li> </ul> </li> </ol>","title":"Check-In at 8:30am"},{"location":"scala/009/#schedule","text":"<ol> <li>8:30am Check-in</li> <li>10:30am, 1pm and 2:30pm Regular checks</li> <li>12pm-12:45pm Lunch break</li> </ol>","title":"Schedule"},{"location":"scala/009/#other-notes","text":"<ul> <li>The team reports luck of understanding of recursion and <code>foldLeft</code></li> <li>If you want to work on anything else in Scala (that feels or looks better), you're free to do so! Writing the tic-tac-toe application can be yours, too</li> <li>Helping others in Scala is learning the language better</li> </ul>","title":"Other Notes"},{"location":"scala/010/","text":"","title":"Day 10 / Mar 14 (Mon)"},{"location":"scala/010/#goals","text":"","title":"Goals"},{"location":"scala/010/#game-team","text":"<ol> <li>Develop a brand new game application: Tower of Hanoi</li> <li>Drawing every state change to the console (similarly to tic-tac-toe)</li> <li>Deadline: Friday 2:30pm on GitHub</li> <li>Every day push all your code to a GitHub repo</li> <li>Appoint one person as a liaison to talk to the mentor (for the whole week)</li> <li>Choose how, where and when to work (in the office or remotely, mornings or evenings, alone or together). Mind the single contact person.</li> <li>Name the team for proper communication<ul> <li>Send me the name by Tue EOD on slack</li> </ul> </li> </ol>","title":"Game Team"},{"location":"scala/010/#office-team","text":"<ol> <li>Name the team for proper communication<ul> <li>By Tue 8:30am</li> </ul> </li> <li>Starting afresh with Scala</li> <li>Focusing on individual teaching (allowing for different learning pace and more smooth and quiet learning experience)</li> </ol>","title":"Office Team"},{"location":"scala/010/#scala-topics","text":"<p>Using online resources to learn Scala. Encourage habit of reading free material to learn Scala better.</p>","title":"Scala Topics"},{"location":"scala/010/#creative-scala","text":"<p>Creative Scala - a book that is available at no cost (in electronic and online formats) and targeted at new developers who want to learn Scala and have fun. Exactly us!</p> <ol> <li>16.1 Literals and Expressions</li> <li>6.2 Method Syntax</li> <li>16.2 Value and Method Declarations</li> <li>7.2 Match Expressions</li> <li>9.1 Functions</li> <li>16.3 Functions as Values</li> <li>10.2 Working with Lists</li> <li>10.3 Transforming Sequences</li> </ol>","title":"Creative Scala"},{"location":"scala/010/#tour-of-scala","text":"<p>Tour of Scala</p>","title":"Tour of Scala"},{"location":"scala/010/#scala-book","text":"<p>Scala Book</p>","title":"Scala Book"},{"location":"scala/010/#exercises","text":"<ol> <li> <p>Learning Scala</p> <ol> <li>page 102: 1, 2, 3, 4, 5, 6</li> <li>Review solutions in <code>solutions/day10.sc</code></li> </ol> </li> <li> <p>Creative Scala</p> <ol> <li>Method Declaration Syntax</li> <li>12.3 Branching Structures</li> </ol> </li> </ol>","title":"Exercises"},{"location":"scala/011/","text":"","title":"Day 11 / Mar 15 (Tue)"},{"location":"scala/011/#goal","text":"<ol> <li>Developing Scala applications</li> </ol>","title":"Goal"},{"location":"scala/011/#exercises","text":"","title":"Exercises"},{"location":"scala/011/#converter","text":"<p>Create <code>Converter</code> class that converts Farenheits to Celcius.</p>","title":"Converter"},{"location":"scala/011/#palindrome","text":"<p>Define <code>palindrome</code> method using pattern matching and recursion.</p> <pre><code>def palindrome(s: String): Boolean = ???\n</code></pre>  <p>Review a solution in <code>solutions/day011-palindrome.sc</code>.</p>","title":"Palindrome"},{"location":"scala/011/#longest","text":"<pre><code>// Exercise 4 page 103\n// Create a function that takes a list of strings\n// and returns the longest string in the list\n// Hint: Use foldLeft\n\ndef longest(ss: List[String]): String = {\n  // ss.maxBy(_.length)\n  val maxStringCandidate = \"\"\n  ss.foldLeft(maxStringCandidate) { (longestString, s) =&gt;\n    if (longestString.length &lt; s.length) s else longestString\n  }\n}\n// longest(List(\"abc\",\"420\",\"a8c33\"))\n// 1. (maxStringCandidate, \"abc\") =&gt; \"abc\"\n// 2. (\"abc\", \"420\") =&gt; \"abc\"\n// 3. (\"abc\", \"a8c33\") =&gt; \"a8c33\"\n</code></pre>","title":"longest"},{"location":"scala/011/#size-of-the-longest-element","text":"<p><code>longest</code> that returns the size of the longest element (not the element itself).</p> <pre><code>// longestSize(List(\"trzy\")) == 4\ndef longestSize(ss: List[String]): Int = {\n  val maxLenCandidate = 0\n  ss.foldLeft(maxLenCandidate)((b, s) =&gt;\n    if (b &lt; s.length) s.length else b\n  )\n}\n</code></pre>","title":"Size of The Longest Element"},{"location":"scala/011/#longest-strings","text":"<p><code>longest</code> that returns the longest string(s) in the list (all that are of the longest size).</p> <pre><code>case class LongestAllPair(size: Int, ns: List[String])\ndef longestAll(ss: List[String]): List[String] = {\n  val candidate = LongestAllPair(-1, List.empty[String])\n  ss.foldLeft(candidate)((b, s) =&gt;\n    // s.length &gt; \"b\" save s (and remove the acc)\n    // s.length == \"b\" add s to whatever you collected so far\n    // if s.length &lt; \"b\" then drop s\n    if (b.size == -1) {\n      LongestAllPair(s.length, List(s))\n    } else if (b.size &lt; s.length) {\n      LongestAllPair(s.length, List(s))\n    } else if (b.size == s.length) {\n      LongestAllPair(b.size, s +: b.ns)\n    } else {\n      b\n    }\n  ).ns\n}\n\nlongestAll(List(\"\", \"\", \"\")) == List(\"\", \"\", \"\")\nlongestAll(List(\"one\", \"two\", \"no\")) == List(\"one\", \"two\")\n</code></pre>","title":"Longest Strings"},{"location":"scala/011/#handling-command-line","text":"<p>Write a command-line application that prints out the minimum and maximum numbers out of numbers from command line.</p> <pre><code>object Main extends App {\n\n  if (args.isEmpty) {\n    println(\"ERROR: No arguments. Exiting...\")\n    sys.exit(0)\n  }\n\n  println(s\"Number of arguments on command line: ${args.length}\")\n\n  // Ints assumed\n  val ns = args.map(_.toInt).sorted\n  println(s\"Given the following arguments: ${ns.mkString(\", \")}\")\n\n  println(s\"Maximum value: ${ns.max}\")\n  println(s\"Minimum value: ${ns.min}\")\n}\n</code></pre>","title":"Handling Command Line"},{"location":"scala/011/#scala-topics","text":"","title":"Scala Topics"},{"location":"scala/011/#case-class","text":"<pre><code>class Person(val name: String) {\n  override def toString = {\n    name\n  }\n}\nobject Person {\n  def apply(name: String): Person = new Person(name)\n}\n</code></pre> <pre><code>val jacek = new Person(\"Jacek\")\njacek.name // \"Jacek\"\n\njacek.toString\n</code></pre> <pre><code>case class MyPerson(name: String)\n</code></pre>","title":"Case Class"},{"location":"scala/011/#schedule","text":"<ol> <li>8:30 - 10:10</li> <li>10:25 - 12:00</li> </ol>","title":"Schedule"},{"location":"scala/012/","text":"","title":"Day 12 / Mar 16 (Wed)"},{"location":"scala/013/","text":"","title":"Day 13 / Mar 17 (Thu)"},{"location":"scala/014/","text":"","title":"Day 14 / Mar 18 (Fri)"},{"location":"scala/014/#scala-topics","text":"<ol> <li>Imports and packages</li> <li>String interpolators (<code>s</code>, <code>f</code>)</li> <li><code>this</code></li> <li>for-comprehension</li> </ol>","title":"Scala Topics"},{"location":"scala/014/#exercise-dataframe-data-structure-continued","text":"<p>Developing <code>DataFrame</code> data structure similarly to Spark SQL's <code>DataFrame</code> (that is a type alias of Dataset:</p> <ol> <li><code>show()</code></li> <li><code>join(right: DataFrame, on: Seq[String]): DataFrame</code></li> <li>(extra) <code>select(cols: Seq[String]): DataFrame</code></li> </ol>","title":"Exercise: DataFrame Data Structure (continued)"},{"location":"scala/014/#tips","text":"<ol> <li><code>case class DataFrame(rows: Seq[Seq[Any]], colNames: Seq[String])</code></li> </ol>","title":"Tips"},{"location":"scala/014/#exercise-finding-same-elements-in-two-sequences","text":"<p>Write a function that finds the same elements (matches) of two sequences.</p> <ol> <li>Use Seq.intersect.</li> </ol>","title":"Exercise: Finding Same Elements in Two Sequences"},{"location":"scala/014/#exercise-matchbyid","text":"<p>Write a function that returns the elements at given positions.</p> <pre><code>def matchById(\n  left: Seq[Any],\n  right: Seq[Any],\n  ids: Seq[Int]): (Seq[Any], Seq[Any]) = ???\n</code></pre>","title":"Exercise: matchById"},{"location":"scala/014/#exercise-rowsbymatchesandids","text":"<p>Write a function that finds rows (among the <code>rows</code>) with values (<code>matches</code>) at given positions (<code>ids</code>).</p> <pre><code>def rowsByMatchesAndIds[T](\n  rows: Seq[Seq[T]],\n  values: Seq[T],\n  ids: Seq[Int]): Seq[Seq[T]] = ???\n</code></pre>","title":"Exercise: rowsByMatchesAndIds"},{"location":"scala/014/#example","text":"<p>Given the following:</p> <pre><code>val rows = Seq(\n    Seq(\"zero\", true, 8),\n    Seq(\"one\", false, 3))\nval values = Seq(true, 8)\nval ids = Seq(1, 2)\n</code></pre> <p>Only <code>Seq(\"zero\", true, 8)</code> row matches values <code>true</code> and <code>8</code> at the positions <code>1</code> and <code>2</code>.</p> <pre><code>assert(rowsByMatchesAndIds(rows, values, ids) == Seq(Seq(\"zero\", true, 8)))\n</code></pre>","title":"Example"},{"location":"scala/014/#scala-topics-soon","text":"<ol> <li>for-comprehension and <code>if</code> guard</li> <li>Partial function (<code>case</code>)</li> <li><code>HashMap</code></li> </ol>","title":"Scala Topics (soon)"},{"location":"scala/015/","text":"","title":"Day 15 / Mar 21 (Mon)"},{"location":"scala/015/#misc","text":"<ol> <li>All 10 Scala devs working together in the office. Yay! \ud83d\udd25</li> <li>Honing Scala skills</li> <li>A Scala exam on April, 1st (Fri) at 10am<ul> <li>Possibly remote?</li> </ul> </li> </ol>","title":"Misc"},{"location":"scala/015/#discussion-differences-between-methods-and-functions-def-and-val","text":"<pre><code>object Daniel {\n  val f: Int =&gt; Int = _ * 2\n}\n</code></pre> <pre><code>class Daniel {\n  def g(n: Int) = n * 2\n  val h: Int =&gt; Int = _ * 2\n}\n</code></pre> <pre><code>Daniel.f(2)\n(new Daniel).g(32)\n(new Daniel).h(43)\n</code></pre>","title":"Discussion: Differences Between Methods and Functions (def and val)"},{"location":"scala/015/#exercise-random-pairs","text":"<p>Write a function that generate distinct random pairs of 2 numbers from two <code>Int</code> sequences (of the same length)</p> <ol> <li>scala.util.Random</li> <li><code>randomPairs(left: Seq[Int], right: Seq[Int]): Seq[(Int, Int)]</code></li> </ol>  <p>Solution: <code>randomPairs.sc</code></p>","title":"Exercise: Random Pairs"},{"location":"scala/015/#polymorphic-methods","text":"<ol> <li>Polymorphic Methods</li> </ol> <pre><code>def randomPairs[T](left: Seq[T], right: Seq[T]): Seq[(T, T)] = {\n  import scala.util.Random\n  Random.shuffle(left).zip(Random.shuffle(right))\n}\n</code></pre> <pre><code>case class MyOwnClass(id: Long)\n// two different ways to create a series of case class instances\nval myLeft = (0 to 4).map(MyOwnClass(_))\nval myRight = (5 to 9).map(n =&gt; MyOwnClass(n))\nrandomPairs(myLeft, myRight)\n</code></pre>","title":"Polymorphic Methods"},{"location":"scala/015/#exercise-uppercase-every-n-th-word-pair-programming","text":"<ol> <li> <p>Use Pair programming technique to work together on a solution to the exercise.</p> <ol> <li>Use the above polymorphic method to generate pairs of two Scala devs to work together</li> </ol> <pre><code>val hakunaMatata = Seq(\"rafal\", \"damian\", \"daniel\", \"ania\", \"grzegorz\")\nval theOffice = Seq(\"adam\", \"leo\", \"mateusz\", \"krzysiek\", \"janek\")\nrandomPairs(hakunaMatata, theOffice)\n</code></pre> </li> <li> <p>Develop a command-line application to uppercase every <code>n</code>-th word in a file</p> <ol> <li>A file path and <code>n</code> are command-line arguments (parameters)</li> <li>A brand new Scala project in IntelliJ IDEA</li> <li><code>extends App</code></li> <li>Publish the project to GitHub</li> </ol> </li> </ol>  <p>Solution: <code>uppercase.sc</code></p>","title":"Exercise: Uppercase Every N-th Word (Pair Programming)"},{"location":"scala/015/#partial-functions","text":"<ol> <li>Pattern Matching</li> <li>Anonymous Functions</li> <li>Partial Functions (<code>case</code> functions)</li> <li><code>if</code> Guards</li> <li>Destructuring and Case Classes</li> </ol>","title":"Partial Functions"},{"location":"scala/015/#scala-topics","text":"<p>From Scala for the Impatient book:</p> <ol> <li>2.8 Default and Named Arguments, p. 21</li> <li>4.7 Tuples, p. 45</li> <li>4.8 Zipping, p. 46</li> </ol>","title":"Scala Topics"},{"location":"scala/015/#more-exercises","text":"<p>From or based on Scala for the Impatient book:</p> <ol> <li> <p>Write a function that prints out a text in a box of <code>-</code>s (dashes), <code>|</code> (pipes), and <code>+</code> (pluses) e.g.</p> <pre><code>+-------+\n| Hello |\n+-------+\n</code></pre> </li> <li> <p>P28. Sorting a list of lists according to length of sublists</p> <ol> <li>We suppose that a list contains elements that are lists themselves. The objective is to sort the elements of the list according to their length. E.g. short lists first, longer lists later, or vice versa.</li> </ol> <pre><code>scala&gt; lsort(List(List('a, 'b, 'c), List('d, 'e), List('f, 'g, 'h), List('d, 'e), List('i, 'j, 'k, 'l), List('m, 'n), List('o)))\nres0: List[List[Symbol]] = List(List('o), List('d, 'e), List('d, 'e), List('m, 'n), List('a, 'b, 'c), List('f, 'g, 'h), List('i, 'j, 'k, 'l))\n</code></pre> </li> </ol>","title":"More Exercises"},{"location":"scala/015/#further-reading","text":"<ol> <li>STD LIB module in Scala Exercises</li> </ol>","title":"Further Reading"},{"location":"scala/015/#schedule","text":"<ol> <li>8:30 - 10:25<ul> <li>15' break</li> </ul> </li> <li>10:35 - 12:00<ul> <li>45' lunch break</li> </ul> </li> <li>12:45 - 13:40<ul> <li>15' break</li> </ul> </li> <li>13:55 - 14:30</li> </ol>","title":"Schedule"},{"location":"scala/016/","text":"","title":"Day 16 / Mar 22 (Tue)"},{"location":"scala/016/#warm-up-exercises","text":"","title":"Warm-Up Exercises"},{"location":"scala/016/#all-coordinates","text":"<p>Write a function that takes 8 uppercase letters (from A to H) and 8 numbers (from 1 to 8) and returns all the possible 64 coordinates (A1, A2,..., A8, B1,...).</p>  <p>Review a solution in <code>solutions/all-coordinates.sc</code>.</p>","title":"All Coordinates"},{"location":"scala/016/#corner-half","text":"<p>Change the above function to return one of the two \"corner\" halves.</p>  <p>Review a solution in <code>solutions/cornerHalf.sc</code>.</p>","title":"Corner Half"},{"location":"scala/016/#word-occurences","text":"<p>Write a function that reads a file and prints out word stats: all the words and their occurences.</p>  <p>Review solutions in <code>solutions/wordOccurences.sc</code>.</p>","title":"Word Occurences"},{"location":"scala/016/#type-aliases","text":"<p>Read up on the topic in Type alias:</p>  <p>Type aliases should be used instead of subtyping, when this subclassing does not actually extend the original type.</p>   <pre><code>case class Occ(n: Int)\n\ntype Occurence = Int\ntype Word = String\n</code></pre> <p>With the above type aliases, you can define a return type to be <code>Seq[(Word, Occurence)]</code>.</p>","title":"Type Aliases"},{"location":"scala/016/#collectionmap","text":"<p>Learn more in the following resources:</p> <ol> <li>Standard Library</li> <li>scala.collection.Map</li> </ol>","title":"collection.Map"},{"location":"scala/016/#pair-programming","text":"<p>Use Pair programming technique and our <code>randomPairs</code> polymorphic method to work together on a solution to the exercise.</p>","title":"Pair Programming"},{"location":"scala/016/#file-stats","text":"<p>Write a function that reads a file and prints out the file statistics based on one of the following command-line options:</p> <ol> <li> <p>--words - All the words and their occurences</p> </li> <li> <p>--lines - All the lines and their length (number of characters, incl. whitespaces), the number of words, and the words themselves (as a comma-separated sequence or similar)</p> </li> </ol>","title":"File Stats"},{"location":"scala/016/#schedule","text":"<ol> <li>8:30 - 10:15<ul> <li>15' break</li> </ul> </li> <li>10:30 - 11:50</li> <li>12:45pm - 1:40pm</li> <li>1:50pm - 2:30pm</li> </ol>","title":"Schedule"},{"location":"scala/017/","text":"","title":"Day 17 / Mar 23 (Wed)"},{"location":"scala/017/#warm-up-exercises","text":"","title":"Warm-Up Exercises"},{"location":"scala/017/#consecutive-duplicates-of-elements","text":"<pre><code>def consecutiveDuplicates[T](ts: Seq[T], n: Int): Seq[T]\n</code></pre> <pre><code>val ns = Seq(1,2,3,4,5)\nval actual = consecutiveDuplicates(ns, 3)\nval expected = Seq(1,2,2,3,3,3,4,5,5)\nassert(actual == expected)\n</code></pre> <pre><code>val ss = Seq(\"one\", \"two\", \"three\", \"four\")\nval actual = consecutiveDuplicates(ns, 3)\nval expected = Seq(\n    \"one\",\n    \"two\", \"two\",\n    \"three\", \"three\", \"three\",\n    \"four\")\nassert(actual == expected)\n</code></pre>  <p>Review a solution in <code>solutions/consecutiveDuplicates.sc</code>.</p>","title":"Consecutive Duplicates of Elements"},{"location":"scala/017/#pair-programming","text":"","title":"Pair Programming"},{"location":"scala/017/#file-stats-using-scopt","text":"<p>Use scopt to handle command-line options in the File Stats application we did yesterday:</p> <ol> <li> <p>--words - All the words and their occurences</p> </li> <li> <p>--lines - All the lines and their length (number of characters, incl. whitespaces), the number of words, and the output of <code>--words</code></p> </li> </ol>","title":"File Stats using scopt"},{"location":"scala/017/#stacked-boxes","text":"<p>Develop an application that takes variable number of strings (of odd lenght, e.g. 1, 3, 5, ...) and prints them out as stacked boxes.</p>  <p>Solutions:</p> <ol> <li>Adam + Rafa\u0142</li> <li>Ania + Grzegorz + Janek</li> <li>Daniel + Mateusz</li> <li>Krzysiek + Damian</li> </ol>","title":"Stacked Boxes"},{"location":"scala/017/#scala-theory","text":"<ol> <li>Case classes and copy constructor</li> </ol>","title":"Scala Theory"},{"location":"scala/017/#exercises","text":"<ol> <li>Use <code>Option[String]</code> and <code>boolean</code> types to define options using <code>scopt</code></li> </ol> <p>From or based on Scala for the Impatient book:</p> <ol> <li> <p><code>sum(numbers)</code> using <code>foldLeft</code></p> </li> <li> <p>Ex 5 page 26</p>  <p>Write a procedure <code>countdown(n: Int)</code> that prints the numbers from <code>n</code> to 0.</p>  </li> <li> <p>Ex 2 page 38</p>  <p>Write a loop that swaps adjancent elements of an array of integers.</p>  <pre><code>def swap[T](ts: Array[T]): Array[T]\n</code></pre> <pre><code>swap(Array(1,2,3,4,5)) == swap(Array(2,1,4,3,5))\n</code></pre> </li> <li> <p>Ex 9 page 47</p>  <p>Write a function <code>lteqgt(values: Array[Int], v: Int)</code> that returns a triple containing the counts of values less than <code>v</code>, equal to <code>v</code>, and greater than <code>v</code>.</p>  </li> </ol>","title":"Exercises"},{"location":"scala/017/#schedule","text":"<ol> <li>8:30 - 10:00</li> <li>10:15 - 12:00pm</li> <li>12:45pm - 1:15pm</li> <li>1:30pm - 2:30pm</li> </ol>","title":"Schedule"},{"location":"scala/018/","text":"","title":"Day 18 / Mar 24 (Thu)"},{"location":"scala/018/#warm-up-exercise","text":"","title":"Warm-Up Exercise"},{"location":"scala/018/#replace-words-in-lines","text":"<p>Write a function that replaces words (case-insensitive) in a given collection of <code>lines</code> with the strings from <code>replacements</code>.</p> <pre><code>def replaceWords(\n  lines: Seq[String],\n  replacements: Map[String, String]): Seq[String] = ???\n</code></pre> <pre><code>val actual = replaceWords(\n  lines = Seq(\n    \"Good morning. Nice to see you\",\n    \"Dzien dobry. Jak idzie?\"),\n  replacements = Map(\n    \"good\" -&gt; \"Dobry\",\n    \"see\" -&gt; \"XXX\",\n    \"jak\" -&gt; \"How\"\n  )\n)\nval expected = Seq(\n  \"Dobry morning. Nice to XXX you\",\n  \"Dzien dobry. How idzie?\")\nassert(actual == expected)\n</code></pre>  <p>Review a solution in <code>solutions/replaceWords.sc</code>.</p>","title":"Replace Words in Lines"},{"location":"scala/018/#pair-programming","text":"","title":"Pair Programming"},{"location":"scala/018/#mylist","text":"<p>Create a <code>PriorityList</code> class to mimic <code>scala.collection.List</code> that keeps numbers sorted. Define the following methods:</p> <ol> <li><code>add(n: Int): PriorityList</code></li> <li><code>foreach</code></li> <li><code>tail: PriorityList</code></li> <li><code>head: Int</code> that returns the higest number</li> </ol>  <p>Review a solution in <code>solutions/priorityList.sc</code>.</p>","title":"MyList"},{"location":"scala/019/","text":"","title":"Day 19 / Mar 25 (Fri)"},{"location":"scala/019/#pair-programming","text":"<p>Pair programming</p>","title":"Pair Programming"},{"location":"scala/019/#computer","text":"<p>Load a file with instructions and executes them one by one on a board of n x m size.</p> <ol> <li><code>CREATE [arrow] [x] [y] [id]</code> - places an <code>arrow</code> symbol (^, &gt;, v, &lt;) identified by <code>id</code> on the (x, y) field</li> <li><code>ROTATE [id] 0, 90, 180, 270, -90, -180, -270</code> - rotates an arrow to a given direction</li> <li><code>MOVE [id] [n]</code> - moves an arrow forward <code>n</code> steps</li> </ol> <p>Display a state of a board every instruction.</p> <p>Hint: Start with one arrow only. Rotate and move it around.</p>  <p>Working in pairs1:</p> <ol> <li><code>(rafal,krzysiek)</code></li> <li><code>(grzegorz,mateusz)</code></li> <li><code>(damian,leo)</code></li> <li><code>(daniel,janek)</code></li> <li><code>(ania,adam)</code></li> </ol>","title":"Computer"},{"location":"scala/019/#scala-resources","text":"<ol> <li>Hands-on Scala Programming</li> </ol>","title":"Scala Resources"},{"location":"scala/019/#homework","text":"","title":"Homework"},{"location":"scala/019/#scalatest","text":"<p>Read the documentation of ScalaTest and create some tests.</p>   <ol> <li> <p>The story, all names, characters, and incidents portrayed in this production are fictitious. No identification with actual persons (living or deceased), places, buildings, and products is intended or should be inferred. (cf. All persons fictitious disclaimer)\u00a0\u21a9</p> </li> </ol>","title":"ScalaTest"},{"location":"scala/020/","text":"","title":"Day 20 / Mar 28 (Mon)"},{"location":"scala/020/#pair-programming","text":"<p>Pair programming</p>","title":"Pair Programming"},{"location":"scala/020/#roman-to-arabic-numeral-converter","text":"<p>(Before lunch)</p> <p>Create a brand new project for a command-line application that converts a Roman number to the corresponding Arabic number and vice versa.</p> <ol> <li> <p>The application should accept an option to indicate \"direction\", i.e. from Roman to Arabic or the opposite. </p> <ol> <li>Advanced version: Let the application determine it</li> </ol> </li> <li> <p>The application should take a string of numerals on command line until a user exits</p> </li> <li> <p>Publish the project to GitHub and announce on slack</p> </li> </ol>  <p>Working in pairs1:</p> <ul> <li>(rafal,krzysiek)</li> <li>(damian,mateusz)</li> <li>(ania,adam)</li> <li>(grzegorz,leo)</li> <li>(daniel,janek)</li> </ul>","title":"Roman to Arabic Numeral Converter"},{"location":"scala/020/#language-teacher","text":"<p>(After lunch)</p> <p>Create a new project for a command-line application that teaches a language (e.g. English).</p> <p>The application works with a <code>dictionary</code> file that stores translations. The file is loaded at the startup and updated with new translations at shutdown (exit).</p> <p>The application uses another file for a user score. The file contains words, how often they were asked for and the ratio of successful answers.</p> <p>The application is meant to ask words to translate from Polish to English and vice versa and score answers (a success = 1 or a failure = 0).</p> <p>Words with lower score should be asked more often (e.g. twice as often as others).</p> <p>Publish the project to GitHub and announce on slack.</p>  <p>Working in pairs1:</p> <ul> <li>(ania, janek)</li> <li><code>(daniel, leo)</code></li> <li><code>(rafal, adam)</code></li> <li><code>(damian, mateusz)</code></li> <li><code>(grzegorz, krzysiek)</code></li> </ul>","title":"Language Teacher"},{"location":"scala/020/#schedule","text":"<ol> <li>8:30 - 8:45 Status Call / Intro</li> <li>8:45 - 11:45 Pair programming<ul> <li>Roman to Arabic Numeral Converter</li> </ul> </li> <li>11:45 - 12:00 Status Call</li> <li>12:00 - 12:45 Lunch break</li> <li>12:45 - 1:40pm Status Call<ul> <li>Live-coding session (45')</li> <li>Introduction to the next exercise (10')</li> </ul> </li> <li>1:40pm - 2:20pm Pair programming<ul> <li>Language Teacher</li> </ul> </li> <li>2:20pm - 2:30pm Status Call / Outro</li> </ol>   <ol> <li> <p>The story, all names, characters, and incidents portrayed in this production are fictitious. No identification with actual persons (living or deceased), places, buildings, and products is intended or should be inferred. (cf. All persons fictitious disclaimer)\u00a0\u21a9\u21a9</p> </li> </ol>","title":"Schedule"},{"location":"scala/021/","text":"","title":"Day 21 / Mar 29 (Tue)"},{"location":"scala/021/#code-review","text":"<p>Review the projects from the past days (Day 19 and Day 20).</p>","title":"Code Review"},{"location":"scala/021/#scalatest","text":"<p>Introducing ScalaTest test framework</p>","title":"ScalaTest"},{"location":"scala/021/#hands-on-scala-programming","text":"<p>Ask the group about their \"experience\" with Hands-on Scala Programming</p>","title":"Hands-on Scala Programming"},{"location":"scala/021/#pair-programming","text":"<p>Pair programming</p>","title":"Pair Programming"},{"location":"scala/021/#language-teacher","text":"<p>Wrapping up work from yesterday.</p>","title":"Language Teacher"},{"location":"scala/022/","text":"","title":"Day 22 / Mar 30 (Wed)"},{"location":"scala/022/#morning-exercise-sum-element-every-n-numbers","text":"<p>Write a function that checks if every two, three, <code>n</code> numbers in a sequence are followed by their sum.</p> <pre><code>def isSumAfterN(n: Int, ns: Seq[Int]): Boolean = ???\n</code></pre> <p>Write tests first (using ScalaTest test framework).</p>","title":"Morning Exercise: Sum Element Every N Numbers"},{"location":"scala/022/#code-review","text":"<p>An interactive session that demo'es the following:</p> <ol> <li>How to use GitHub for collaborative development</li> <li><code>git</code> on command line</li> <li>Code refactoring with test support (<code>sbt test</code> and IntelliJ IDEA)</li> <li>Contribute to a project using pull requests</li> </ol>","title":"Code Review"},{"location":"scala/022/#pair-programming","text":"<p>Pair programming</p>","title":"Pair Programming"},{"location":"scala/022/#calculator-again","text":"<p>Create a command-line application that reads a file with a series of math operations (one on each line) and gives the total at the end.</p> <p>The following operations are supported:</p> <ol> <li><code>+</code> (sum)</li> <li><code>-</code> (subtract)</li> <li><code>*</code> (multiply)</li> <li><code>/</code> (divide)</li> <li><code>-</code> (negation) (WARNING: The same symbol with subtraction)</li> </ol> <p>The application should suppport <code>PRINT</code> operation that prints out the current total to the standard output (stdout) when it appears in a operation file. There can be zero, one or many <code>PRINT</code> commands.</p> <p>Operation file should support comments (as lines starting with <code>#</code> or <code>//</code>).</p> <p>A sample operation file:</p> <pre><code># + 4 5\n- 8\n+ 5\n-\nPRINT\n- 7\nPRINT\nPRINT\n/ 2\n</code></pre>  <p>Working in pairs1:</p> <ul> <li><code>(daniel,leo)</code></li> <li><code>(ania,krzysiek)</code></li> <li><code>(damian,janek)</code></li> <li><code>(rafal,adam)</code></li> <li><code>(grzegorz,mateusz)</code></li> </ul>","title":"Calculator Again"},{"location":"scala/022/#schedule","text":"<ol> <li>11:45 - 12:30 Lunch break</li> <li>12:30pm - 1:35pm</li> <li>1:40pm - 2:30pm</li> </ol>   <ol> <li> <p>The story, all names, characters, and incidents portrayed in this production are fictitious. No identification with actual persons (living or deceased), places, buildings, and products is intended or should be inferred. (cf. All persons fictitious disclaimer)\u00a0\u21a9</p> </li> </ol>","title":"Schedule"},{"location":"scala/023/","text":"","title":"Day 23 / Mar 31 (Thu)"},{"location":"scala/023/#pair-programming","text":"<p>Pair programming</p>","title":"Pair Programming"},{"location":"scala/023/#zoo-inheritance","text":"<ol> <li>Create a command-line application that loads a zoo registry (a file with animal names and their count)</li> <li>Create a trait <code>Animal</code> that defines <code>def talk</code>, <code>def walk</code> and <code>def numberOfLegs</code></li> <li>Create concrete classes for animals, e.g. <code>Lion</code>, <code>Duck</code>, <code>Cat</code>, <code>Dog</code></li> <li>Create a sequence of animals and let them <code>talk</code>, <code>walk</code>, and displays <code>numberOfLegs</code></li> </ol> <pre><code>trait Animal {}\ncase class Lion(...) extends Animal {}\n// ...\n</code></pre> <pre><code>val animals = Seq[Animal](...)\n</code></pre> <pre><code>animals.foreach { a =&gt; ??? }\n</code></pre>  <p>Working in pairs1:</p> <ol> <li>FIXME</li> </ol>   <ol> <li> <p>The story, all names, characters, and incidents portrayed in this production are fictitious. No identification with actual persons (living or deceased), places, buildings, and products is intended or should be inferred. (cf. All persons fictitious disclaimer)\u00a0\u21a9</p> </li> </ol>","title":"Zoo Inheritance"},{"location":"scala/024/","text":"","title":"Day 24 / Apr 1 (Fri)"},{"location":"scala/024/#scala-exam-friday","text":"","title":"Scala Exam Friday"},{"location":"scala/024/#rules","text":"<ol> <li>Hybrid: remote and on-site. Whatever you prefer</li> <li>Exercises will be available on that day around 8:30am here</li> <li>How much time? From 8:30am to 3pm</li> <li>How many exercises? 3-5<ol> <li>S-99: Ninety-Nine Scala Problems and many others</li> <li>Exercism</li> <li>Reddit</li> <li>codewars</li> <li>hackerrank</li> </ol> </li> <li>Push all your solutions to GitHub<ol> <li>A separate repo for every project</li> <li>Announce on slack privately to Jacek</li> </ol> </li> <li>All (but scopt) we discussed is possible<ol> <li>Consider ScalaTest a very important part of your development process</li> </ol> </li> <li><code>README.md</code>, <code>.gitignore</code>, method names are all stylistic yet very important things<ol> <li>Consult Scala Style Guide</li> </ol> </li> <li>It is as much important how many exercises you managed to complete as how well you wrote the ones you finished</li> </ol>","title":"Rules"},{"location":"scala/024/#scala-coding-problems","text":"<p>The following Scala coding problems can be developed in any order based on your personal preference. The order is random and should not be considered based on their difficulty.</p> <p>You're free to pick the problems you are the most comfortable with and can help you showing how much you mastered Scala over the past month. Enjoy!</p> <ol> <li>Letter value sum</li> <li>Isogram</li> <li>Nonogram row</li> <li>Hamming</li> <li>Robot Simulator</li> </ol>","title":"Scala Coding Problems"},{"location":"scala/024/#extra-scala-coding-challenges","text":"<p>The following Scala exercises are mostly for fun and extra points. They should only be considered when you are done with the main Scala Coding Problems and you found them not challenging enough. Feel free to ignore them.</p> <ol> <li>Pascals Triangle</li> <li>Matching Brackets</li> <li>Spiral Ascension</li> </ol>","title":"Extra Scala Coding Challenges"},{"location":"spark/","text":"<p>Spark module is among the modules of the Scala Academy project. It is scheduled to take 2 weeks and teaches Apache Spark 3.2.1 focusing on the following modules:</p> <ul> <li>Spark SQL (Week 6)</li> <li>Spark Structured Streaming (Week 7)</li> </ul>","title":"Spark"},{"location":"spark/001/","text":"","title":"Day 1 / Apr 4 (Mon)"},{"location":"spark/001/#scala-module","text":"<p>Wrapping up the Scala module.</p> <ol> <li>One-on-ones with the students</li> </ol>","title":"Scala Module"},{"location":"spark/001/#pair-programming","text":"<p>Working in pairs on Spiral Ascension (one of the Extra Scala Coding Challenges).</p>  <p>Working in pairs1:</p> <ul> <li><code>(ania,janek)</code></li> <li><code>(daniel,leo)</code></li> <li><code>(damian,krzysiek)</code></li> <li><code>(rafal,adam)</code></li> <li><code>(grzegorz,mateusz)</code></li> </ul>","title":"Pair Programming"},{"location":"spark/001/#spark-sql","text":"<p>Next are 5 days to learn Spark SQL with Scala and SQL</p> <ol> <li>We know Scala already</li> <li>SQL is a brand new language to learn</li> </ol>   <ol> <li> <p>The story, all names, characters, and incidents portrayed in this production are fictitious. No identification with actual persons (living or deceased), places, buildings, and products is intended or should be inferred. (cf. All persons fictitious disclaimer)\u00a0\u21a9</p> </li> </ol>","title":"Spark SQL"},{"location":"spark/002/","text":"","title":"Day 2 / Apr 5 (Tue)"},{"location":"spark/002/#introduction-spark-sql","text":"<p>Next are 4 days to learn Spark SQL with Scala and SQL</p> <ol> <li>We know Scala already</li> <li>SQL is a brand new language to learn</li> </ol>","title":"Introduction: Spark SQL"},{"location":"spark/002/#morning-exercise-code-review","text":"<ol> <li>Select one or more solutions for a code review<ol> <li>Clone the repo</li> <li>Execute tests (<code>sbt test</code>)</li> <li>Import the project to IntelliJ IDEA</li> <li>Take notes about interesting parts of the code</li> <li>Be ready with questions to the author</li> <li>(advanced) If you find a bug, write a failing test</li> </ol> </li> <li>Time: 45 mins</li> </ol>","title":"Morning Exercise / Code Review"},{"location":"spark/002/#self-study-reading-official-documentation","text":"<ol> <li>Spark Overview (up to Running the Examples and Shell)</li> <li>Submitting Applications</li> <li>Spark SQL, DataFrames and Datasets Guide<ul> <li>Getting Started</li> <li>CSV Files</li> </ul> </li> <li>The scaladoc of Dataset</li> </ol>","title":"Self-Study: Reading Official Documentation"},{"location":"spark/002/#demo-writing-your-first-spark-sql-application","text":"<p>Based on Getting Started.</p>","title":"Demo: Writing Your First Spark SQL Application"},{"location":"spark/002/#resources","text":"<ol> <li>Spark: The Definitive Guide</li> <li>Learning Spark, 2nd Ed</li> </ol>","title":"Resources"},{"location":"spark/003/","text":"","title":"Day 3 / Apr 6 (Wed)"},{"location":"spark/004/","text":"","title":"Day 4 / Apr 7 (Thu)"},{"location":"spark/004/#spark-sql-exercises","text":"<p>Working on Exercises for Apache Spark\u2122 and Scala Workshops</p>","title":"Spark SQL Exercises"},{"location":"spark/004/#split-function-with-variable-delimiter-per-row","text":"<p>split function with variable delimiter per row</p> <pre><code>scala&gt; val removeEmptyElements = (array: Seq[String]) =&gt; array.filter(e =&gt; !e.isEmpty)\nremoveEmptyElements: Seq[String] =&gt; Seq[String] = $Lambda$4378/0x0000000801843840@580792a3\n\nscala&gt; val removeEmptyElementsUDF = udf { (array: Seq[String]) =&gt; array.filter(e =&gt; !e.isEmpty) }\nremoveEmptyElementsUDF: org.apache.spark.sql.expressions.UserDefinedFunction = SparkUserDefinedFunction($Lambda$4379/0x0000000801844840@23ffb040,ArrayType(StringType,true),List(Some(class[value[0]: array&lt;string&gt;])),Some(class[value[0]: array&lt;string&gt;]),None,true,true)\n\nscala&gt; split_values.withColumn(\"split_values\", removeEmptyElementsUDF($\"split_values\")).show(false)\n+-------------------+---------+----------------------+\n|VALUES             |Delimiter|split_values          |\n+-------------------+---------+----------------------+\n|50000.0#0#0#       |#        |[50000.0, 0, 0]       |\n|0@1000.0@          |@        |[0, 1000.0]           |\n|1$                 |$        |[1]                   |\n|1000.00^Test_string|^        |[1000.00, Test_string]|\n+-------------------+---------+----------------------+\n</code></pre>","title":"split function with variable delimiter per row"},{"location":"spark/004/#exercise-using-datasetflatmap-operator","text":"<p>Exercise: Using Dataset.flatMap Operator</p> <pre><code>nums.flatMap { r =&gt;\n  val ns = r.getSeq[Int](0)\n  ns.map(n =&gt; (ns, n))\n}.toDF(\"nums\", \"num\").show\n</code></pre>","title":"Exercise: Using Dataset.flatMap Operator"},{"location":"spark/004/#exercise-flattening-array-columns","text":"<p>Exercise: Flattening Array Columns (From Datasets of Arrays to Datasets of Array Elements)</p>","title":"Exercise: Flattening Array Columns"},{"location":"spark/004/#scala-implicit-conversions","text":"<p>Implicit Conversions</p>","title":"Scala / Implicit Conversions"},{"location":"spark/004/#homework","text":"<ol> <li>Read the scaladoc of the following types in Spark SQL:<ul> <li>org.apache.spark.sql.Column</li> <li>org.apache.spark.sql.Row</li> </ul> </li> </ol>","title":"Homework"},{"location":"spark/004/#schedule","text":"<ol> <li>8:30am - 11:50am Exercises</li> <li>11:50 - 12:40pm Lunch break</li> <li>12:40pm - 2:30pm Exercises</li> </ol>","title":"Schedule"},{"location":"spark/005/","text":"<p>Continuing the journey into the land of Spark SQL.</p>","title":"Day 5 / Apr 8 (Fri)"},{"location":"spark/005/#exercises","text":"<p>Working on Exercises for Apache Spark\u2122 and Scala Workshops.</p> <ol> <li>Converting Arrays of Strings to String</li> <li>Using explode Standard Function</li> <li>Difference in Days Between Dates As Strings</li> <li>How to add days (as values of a column) to date?</li> </ol>","title":"Exercises"},{"location":"spark/005/#limiting-collect_set-standard-function","text":"<p>Limiting collect_set Standard Function</p>","title":"Limiting collect_set Standard Function"},{"location":"spark/005/#slice","text":"<pre><code>scala&gt; all.withColumn(\"only_first_three\", slice($\"all\", 1, 3)).show\n+--------------------+----------------+\n|                 all|only_first_three|\n+--------------------+----------------+\n|     [0, 1, 2, 3, 4]|       [0, 1, 2]|\n|[0, 1, 2, 3, 4, 5...|       [0, 1, 2]|\n+--------------------+----------------+\n</code></pre>","title":"slice"},{"location":"spark/005/#udf","text":"<pre><code>val sliceUDF = udf { (ns: Seq[Int]) =&gt; ns.take(3) }\n</code></pre> <pre><code>scala&gt; all.withColumn(\"only_first_three\", sliceUDF($\"all\")).show\n+--------------------+----------------+\n|                 all|only_first_three|\n+--------------------+----------------+\n|     [0, 1, 2, 3, 4]|       [0, 1, 2]|\n|[0, 1, 2, 3, 4, 5...|       [0, 1, 2]|\n+--------------------+----------------+\n</code></pre>  <pre><code>val sliceUDF = udf { (ns: Seq[Int], begin: Int, end: Int) =&gt; ns.slice(begin, end) }\n</code></pre> <pre><code>scala&gt; all.withColumn(\"only_first_three\", sliceUDF($\"all\", lit(1), lit(3))).show\n+--------------------+----------------+\n|                 all|only_first_three|\n+--------------------+----------------+\n|     [0, 1, 2, 3, 4]|          [1, 2]|\n|[0, 1, 2, 3, 4, 5...|          [1, 2]|\n+--------------------+----------------+\n</code></pre>  <pre><code>val sliceUDF = udf { (ns: Seq[Int], howMany: Int) =&gt; ns.take(howMany) }\n</code></pre> <pre><code>scala&gt; all.withColumn(\"only_first_three\", sliceUDF($\"all\", lit(3))).show\n+--------------------+----------------+\n|                 all|only_first_three|\n+--------------------+----------------+\n|     [0, 1, 2, 3, 4]|       [0, 1, 2]|\n|[0, 1, 2, 3, 4, 5...|       [0, 1, 2]|\n+--------------------+----------------+\n</code></pre>","title":"UDF"},{"location":"spark/005/#filter-standard-function","text":"<pre><code>scala&gt; all.withColumn(\"only_first_three\", filter($\"all\", (x, idx) =&gt; idx &lt; 3 )).show\n+--------------------+----------------+\n|                 all|only_first_three|\n+--------------------+----------------+\n|     [0, 1, 2, 3, 4]|       [0, 1, 2]|\n|[0, 1, 2, 3, 4, 5...|       [0, 1, 2]|\n+--------------------+----------------+\n</code></pre> <pre><code>import org.apache.spark.sql.Column\nval krzysiekFilter: (Column, Column) =&gt; Column = (x, idx) =&gt; idx &lt; 3\n</code></pre> <pre><code>scala&gt; all.withColumn(\"only_first_three\", filter($\"all\", krzysiekFilter)).show\n+--------------------+----------------+\n|                 all|only_first_three|\n+--------------------+----------------+\n|     [0, 1, 2, 3, 4]|       [0, 1, 2]|\n|[0, 1, 2, 3, 4, 5...|       [0, 1, 2]|\n+--------------------+----------------+\n</code></pre>","title":"filter Standard Function"},{"location":"spark/005/#theory","text":"<ol> <li>Basic Aggregation</li> </ol>","title":"Theory"},{"location":"spark/005/#homework","text":"","title":"Homework"},{"location":"spark/005/#reading","text":"<ol> <li>Read the scaladoc of the following types in Spark SQL:<ul> <li>org.apache.spark.sql.RelationalGroupedDataset</li> <li>org.apache.spark.sql.types.StructType</li> </ul> </li> <li>Read Datetime Patterns for Formatting and Parsing</li> </ol>","title":"Reading"},{"location":"spark/005/#exercise","text":"<ol> <li>Using upper Standard Function</li> </ol>","title":"Exercise"},{"location":"spark/005/#schedule","text":"<ol> <li>8:30 - 9:00 Introduction</li> <li>9:00 - 10:00 Exercises</li> <li>10:00 - 10:30 Discussion</li> <li>10:30 - 10:40 Break</li> <li>11:50 - 12:40pm Lunch break</li> <li>12:40pm - 2:30pm Exercises</li> </ol>","title":"Schedule"},{"location":"spark/006/","text":"","title":"Day 6 / Apr 11 (Mon)"},{"location":"spark/006/#welcome-to-week-7","text":"<ol> <li>18.04 (Mon) is a day-off</li> <li>We're back in the office on 19.04 (Tue)</li> <li>You, during 14-15.04 (Thu and Fri) work on a 2-day-long Scala assigment<ul> <li>Everybody works alone (but you can team up, too)</li> </ul> </li> <li>During that time I do code review of all your projects on GitHub<ul> <li>Sending you feedback in a shared Google Docs</li> </ul> </li> </ol>","title":"Welcome to Week 7"},{"location":"spark/006/#introduction-spark-structured-streaming","text":"<p>Next 3 days are about Spark Structured Streaming with Scala and SQL.</p> <ol> <li>We know Scala and Spark SQL already</li> <li>SQL is yet to be learnt</li> </ol>","title":"Introduction: Spark Structured Streaming"},{"location":"spark/006/#morning-exercise-code-review","text":"<ol> <li>Select one or more solutions for a code review<ol> <li>Clone the repo</li> <li>Execute tests (<code>sbt test</code>)</li> <li>Import the project to IntelliJ IDEA</li> <li>Take notes about interesting parts of the code</li> <li>Be ready with questions to the author</li> <li>(advanced) If you find a bug, write a failing test</li> </ol> </li> <li>Time: 45 mins</li> </ol>","title":"Morning Exercise / Code Review"},{"location":"spark/006/#self-study-reading-official-documentation","text":"<ol> <li>Structured Streaming Programming Guide</li> <li>Scala examples</li> </ol>","title":"Self-Study: Reading Official Documentation"},{"location":"spark/006/#demo-writing-your-first-spark-structured-streaming-application","text":"<p>Based on Quick Example.</p>","title":"Demo: Writing Your First Spark Structured Streaming Application"},{"location":"spark/006/#resources","text":"<ol> <li>Spark: The Definitive Guide</li> <li>Learning Spark, 2nd Ed</li> </ol>","title":"Resources"},{"location":"spark/007/","text":"<p>Continuing the journey into the land of Spark Structured Streaming.</p>","title":"Day 7 / Apr 12 (Tue)"},{"location":"spark/007/#morning-exercise","text":"<p>Exercise: Your First Standalone Structured Streaming Application</p> <ol> <li>Create a brand new project in IntelliJ IDEA</li> <li>An input directory to read files from should be defined on command line (<code>args(0)</code>)<ol> <li>(advanced/optional) Use scopt for the input directory</li> </ol> </li> <li>Run the application from command line using <code>spark-submit</code></li> </ol>","title":"Morning Exercise"},{"location":"spark/007/#theory","text":"<ol> <li>Spark Structured Streaming</li> </ol>","title":"Theory"},{"location":"spark/007/#exercises","text":"<ol> <li>Exercise: Finding Most Common Non-null Prefix per Group (Occurences)</li> <li>Exercise: Finding First Non-Null Value per Group</li> </ol>","title":"Exercises"},{"location":"spark/007/#homework","text":"<ol> <li>Read the scaladoc of org.apache.spark.sql.streaming.StreamingQuery</li> </ol>","title":"Homework"},{"location":"spark/008/","text":"<p>Continuing the journey into the land of Spark Structured Streaming.</p>","title":"Day 8 / Apr 13 (Wed)"},{"location":"spark/008/#morning-exercise","text":"<ol> <li>Create a brand new project in IntelliJ IDEA</li> <li>Use <code>rate</code> data source as the source</li> <li>Use <code>foreach</code> to write data out<ol> <li>Create a file for the records of a batch</li> <li>Open and close the file before and after <code>process</code>ing the records</li> </ol> </li> <li>Run the application from command line using <code>spark-submit</code></li> </ol>","title":"Morning Exercise"},{"location":"spark/008/#theory","text":"<ol> <li>Joins</li> <li>web UI</li> </ol>","title":"Theory"},{"location":"spark/009/","text":"<p>Back to Scala with a bit of Spark SQL.</p> <p>The following is a list of exercises to help you hone your skills in Scala (with some Spark SQL). You are supposed to do the exercises alone. In the end, push your projects to Github.</p> <p>There is no ordering. There is no need to do them all. You can pick whatever exercises you like in any order.</p> <p>Use slack to ask questions. You can DM me directly or use <code>#scala-academy</code> channel. Up to your liking.</p> <p>Enjoy!</p>","title":"Day 9 / Apr 14 (Thu)"},{"location":"spark/009/#exercises","text":"<p>These exercises are about Spark SQL.</p> <ol> <li>Selecting the most important rows per assigned priority</li> <li>Exercise: Reverse-engineering Dataset.show Output</li> <li>Exercise: Specifying Table and SQL Query on Command Line</li> </ol>","title":"Exercises"},{"location":"spark/009/#scala-project-node","text":"<p>Write a class <code>Node</code> that can have zero, one or more <code>Node</code> children. The class should support adding a child <code>Node</code>, removing and listing them.</p> <p>The most challenging part is <code>display</code> method that should display a <code>Node</code> with all children (that in turn may have <code>Node</code> children that are supposed to be displayed, too).</p> <p>A sample display could look like the following:</p> <pre><code>AdaptiveSparkPlan\n+- Union\n   :- HashAggregate_1\n   :  +- Exchange\n   :     +- HashAggregate\n   :        +- Project\n   :           +- Range\n   +- HashAggregate_2\n      +- Exchange\n         +- HashAggregate\n            +- Project\n               +- Range\n</code></pre> <p>The above shows a <code>Node</code> (called <code>AdaptiveSparkPlan</code>) with one child (<code>Union</code>) that has two children <code>HashAggregate_1</code> and <code>HashAggregate_2</code> and so on.</p> <p>Write unit tests.</p>","title":"Scala Project: Node"},{"location":"spark/009/#project-euler","text":"<ol> <li>Multiples of 3 or 5</li> <li>Even Fibonacci numbers</li> </ol>","title":"Project Euler"},{"location":"spark/009/#reddit","text":"<ol> <li>Additive Persistence</li> <li>Making change</li> <li>The Havel-Hakimi algorithm for graph realization</li> <li>Print a new number by adding one to each of its digit</li> <li>The Game of Blobs</li> </ol>","title":"Reddit"},{"location":"spark/010/","text":"<p>Working on the exercises from Day 9.</p>","title":"Day 10 / Apr 15 (Fri)"}]}